{"version":3,"file":"static/js/5010.7103ca0a.chunk.js","mappings":"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","sources":["../node_modules/@mui/icons-material/esm/Cancel.js","../node_modules/@mui/icons-material/esm/Title.js","pages/OldChapterView.jsx","utils/progressTracker.js","components/ChapterContent.jsx"],"sourcesContent":["\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2m5 13.59L15.59 17 12 13.41 8.41 17 7 15.59 10.59 12 7 8.41 8.41 7 12 10.59 15.59 7 17 8.41 13.41 12z\"\n}), 'Cancel');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M5 4v3h5.5v12h3V7H19V4z\"\n}), 'Title');","import React, { useState, useEffect, useContext, useRef } from 'react';\nimport { useParams, Link, useNavigate } from 'react-router-dom';\nimport axios from \"axios\";\nimport { \n  Box, Typography, Button, Breadcrumbs, Paper, CircularProgress,\n  Divider, IconButton, Drawer, List, ListItem, ListItemText,\n  Snackbar, Alert, Chip, TextField, InputAdornment\n} from '@mui/material';\nimport { \n  ArrowBack, MenuBook, Menu, NavigateBefore, NavigateNext,\n  BookmarkBorder, Bookmark, CheckCircle, Save, Edit, Cancel,\n  Title as TitleIcon, Code as CodeIcon\n} from '@mui/icons-material';\n\n// Import the module data and the ChapterContent component\nimport { getModuleById } from '../data/modules';\nimport ChapterContent from '../components/ChapterContent';\nimport { getChapterProgress, updateChapterProgress } from '../utils/progressTracker';\nimport URLSITE from '../constant';\nimport hljs from 'highlight.js';\nimport 'highlight.js/styles/googlecode.css';\nimport SEO from \"./SEO\"\n// Import Verilog highlighting - make sure you have this installed\nimport 'highlight.js/lib/languages/verilog';\nimport AuthContext from '../context/AuthContext';\n\n// Register Verilog language with highlight.js if available\ntry {\n  const verilogLang = require('highlight.js/lib/languages/verilog');\n  hljs.registerLanguage('verilog', verilogLang);\n} catch (error) {\n  console.warn('Verilog highlighting not available:', error);\n}\n\nconst ChapterView = () => {\n  const { moduleId, chapterId } = useParams();\n  const navigate = useNavigate();\n  const [module, setModule] = useState(null);\n  const [chapter, setChapter] = useState(null);\n  const [chapterContent, setChapterContent] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [drawerOpen, setDrawerOpen] = useState(false);\n  const [isChapterBookmarked, setIsChapterBookmarked] = useState(false);\n  const [isChapterCompleted, setIsChapterCompleted] = useState(false);\n  const [snackbarOpen, setSnackbarOpen] = useState(false);\n  const [snackbarMessage, setSnackbarMessage] = useState('');\n  const [snackbarSeverity, setSnackbarSeverity] = useState('success');\n  const [error, setError] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [progress, setProgress] = useState(null);\n  const context = useContext(AuthContext);\n  \n  // New state for handling editable sections\n  const [isEditing, setIsEditing] = useState(false);\n  const [saveLoading, setSaveLoading] = useState(false);\n  const sectionRefs = useRef({});\n  const sectionTitleRefs = useRef({});\n  const codeExampleRefs = useRef({});\n  \n  // State for edited content\n  const [editedSections, setEditedSections] = useState([]);\n  const [editedCodeExamples, setEditedCodeExamples] = useState([]);\n  const [editedChapterTitle, setEditedChapterTitle] = useState(\"\");\n  const [editedChapterDescription, setEditedChapterDescription] = useState(\"\");\n\n  // Clear refs when toggling edit mode or when chapter changes\n  useEffect(() => {\n    sectionRefs.current = {};\n    sectionTitleRefs.current = {};\n    codeExampleRefs.current = {};\n  }, [isEditing, chapterId]);\n\n  const navigateToNextChapter = () => {\n    if (!context?.currentModule?.chapters) return;\n    \n    let nextIndex = context.currentChapterIndex + 1;\n    if (context.currentModule.chapters.length > nextIndex) {\n      context.setCurrentChapterIndex?.(nextIndex);\n      navigate(`/modules/${moduleId}/chapters/${context.currentModule.chapters[nextIndex].chapterId}`);\n    }\n  };\n\n  const navigateToPrevChapter = () => {\n    if (!context?.currentModule?.chapters) return;\n    \n    let prevIndex = context.currentChapterIndex - 1;\n    if (prevIndex >= 0) {\n      context.setCurrentChapterIndex?.(prevIndex);\n      navigate(`/modules/${moduleId}/chapters/${context.currentModule.chapters[prevIndex].chapterId}`);\n    }\n  };\n\n  // Check user access to paid modules\n  useEffect(() => {\n    if (!moduleId || !module || !module.moduleType) return;\n    if (!context?.user) {\n      setIsAuthenticated(false);\n      return;\n    }\n    \n    setIsAuthenticated(true);\n    \n    const checkModuleAccess = async () => {\n      if (!moduleId || !module) return;\n      \n      try {\n        const response = await axios.post(`${URLSITE}/api/general/user-by-email`, { \n          email: context.user.wholeData?.email \n        });\n        \n        if (response.status === 200) {\n          // If module is not free and user doesn't have access, redirect\n          if (module.moduleType !== \"free\" && \n              !response.data.paidModule?.some(mod => mod.moduleId === moduleId)) {\n            navigate(`/modules/${moduleId}`);\n          }\n        }\n      } catch (err) {\n        console.error('Error checking module access:', err);\n        // Don't redirect on error, just log it\n      }\n    };\n\n    checkModuleAccess();\n  }, [context?.user]);\n\n  // Apply syntax highlighting\n  useEffect(() => {\n    const applyHighlighting = () => {\n      setTimeout(() => {\n        document.querySelectorAll('pre code').forEach((block) => {\n          hljs.highlightBlock(block);\n        });\n      }, 0);\n    };\n    \n    if (!loading) {\n      applyHighlighting();\n    }\n  }, [loading, isEditing, chapterContent]);\n\n  // Fetch module and chapter data\n  useEffect(() => {\n    const fetchModuleAndChapter = async () => {\n      try {\n        setLoading(true);\n        \n        // Get module data\n        let moduleData = getModuleById(moduleId);\n        if (!moduleData) {\n          throw new Error(`Module with ID ${moduleId} not found`);\n        }\n        \n        setModule(moduleData);\n        \n        // Fetch chapter content from server using chapterId\n        try {\n          const response = await axios.get(`${URLSITE}/api/general/chapter/${chapterId}`);\n          const data = response.data;\n          \n          setChapterContent(data);\n          setEditedChapterTitle(data.title || \"\");\n          setEditedChapterDescription(data.description || \"\");\n          \n          // Set chapter basic info\n          setChapter({\n            id: data.id,\n            title: data.title,\n            moduleId: data.moduleId\n          });\n        } catch (err) {\n          console.error('Error fetching chapter content:', err);\n          setError(err.message);\n          \n          // Fallback to module data if API fetch fails\n          if (moduleData?.chapters) {\n            const chapterIdNum = parseInt(chapterId, 10);\n            const fallbackChapter = moduleData.chapters.find(c => c.id === chapterIdNum);\n            \n            if (fallbackChapter) {\n              setChapter(fallbackChapter);\n              // Create minimal chapter content structure\n              setChapterContent({\n                id: fallbackChapter.id,\n                title: fallbackChapter.title,\n                description: fallbackChapter.description || \"\",\n                sections: fallbackChapter.sections || [],\n                codeExamples: fallbackChapter.codeExamples || []\n              });\n            } else {\n              throw new Error(`Chapter with ID ${chapterId} not found`);\n            }\n          }\n        }\n        \n        // Get progress data if authenticated\n        if (isAuthenticated) {\n          try {\n            const progressResponse = await axios.get(`${URLSITE}/api/user/progress/${moduleId}`);\n            if (progressResponse.status === 200) {\n              setProgress(progressResponse.data);\n            }\n          } catch (progressErr) {\n            console.error('Error fetching progress:', progressErr);\n            // Continue without progress data\n          }\n        }\n        \n        // Check if this chapter is bookmarked\n        if (chapterId) {\n          const bookmarkedChapters = JSON.parse(localStorage.getItem('bookmarkedChapters') || '[]');\n          const isBookmarked = bookmarkedChapters.some(\n            bookmark => bookmark.moduleId === moduleId && bookmark.chapterId === chapterId\n          );\n          setIsChapterBookmarked(isBookmarked);\n          \n          // Check if chapter is completed\n          const chapterIdNum = parseInt(chapterId, 10);\n          const isCompleted = getChapterProgress(moduleId, chapterIdNum);\n          setIsChapterCompleted(isCompleted);\n        }\n      } catch (error) {\n        console.error('Error fetching data:', error);\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchModuleAndChapter();\n  }, [moduleId, chapterId, isAuthenticated]);\n\n  const toggleDrawer = () => {\n    setDrawerOpen(!drawerOpen);\n  };\n\n  // Handle chapter completion\n  const markChapterCompleted = () => {\n    if (!module || !chapter) return;\n    \n    const chapterIdNum = parseInt(chapterId, 10);\n    updateChapterProgress(moduleId, chapterIdNum, true);\n    setIsChapterCompleted(true);\n    showSnackbar('Chapter marked as completed!', 'success');\n  };\n\n  // Handle chapter bookmarking\n  const toggleChapterBookmark = () => {\n    if (!module || !chapter) return;\n    \n    const bookmarkedChapters = JSON.parse(localStorage.getItem('bookmarkedChapters') || '[]');\n    const bookmarkData = {\n      moduleId,\n      chapterId: chapterId.toString(),\n      moduleTitle: module.title,\n      chapterTitle: chapter.title,\n      timestamp: new Date().toISOString()\n    };\n    \n    if (isChapterBookmarked) {\n      // Remove bookmark\n      const updatedBookmarks = bookmarkedChapters.filter(\n        bookmark => !(bookmark.moduleId === moduleId && bookmark.chapterId === chapterId.toString())\n      );\n      localStorage.setItem('bookmarkedChapters', JSON.stringify(updatedBookmarks));\n      setIsChapterBookmarked(false);\n      showSnackbar('Chapter bookmark removed', 'info');\n    } else {\n      // Add bookmark\n      bookmarkedChapters.push(bookmarkData);\n      localStorage.setItem('bookmarkedChapters', JSON.stringify(bookmarkedChapters));\n      setIsChapterBookmarked(true);\n      showSnackbar('Chapter bookmarked successfully! Access it anytime from your profile.', 'success');\n    }\n  };\n  \n  // Show snackbar message\n  const showSnackbar = (message, severity = 'success') => {\n    setSnackbarMessage(message);\n    setSnackbarSeverity(severity);\n    setSnackbarOpen(true);\n  };\n  \n  // Handle quiz completion from ChapterContent\n  const handleQuizCompletion = (passed) => {\n    if (passed) {\n      setIsChapterCompleted(true);\n      showSnackbar('Congratulations! You passed the quiz and completed this chapter.', 'success');\n    } else {\n      showSnackbar('You need to score at least 70% to complete this chapter.', 'warning');\n    }\n  };\n\n  // Handle enabling editing mode\n  const handleEnableEditing = () => {\n    if (!chapterContent) return;\n    \n    setIsEditing(true);\n    \n    // Initialize with current values\n    setEditedChapterTitle(chapterContent.title || \"\");\n    setEditedChapterDescription(chapterContent.description || \"\");\n    \n    if (chapterContent.sections) {\n      setEditedSections([...chapterContent.sections]);\n    } else {\n      setEditedSections([]);\n    }\n    \n    if (chapterContent.codeExamples) {\n      setEditedCodeExamples([...chapterContent.codeExamples]);\n    } else {\n      setEditedCodeExamples([]);\n    }\n  };\n\n  // Handle section title change\n  const handleSectionTitleChange = (sectionId, newTitle) => {\n    setEditedSections(prevSections => \n      prevSections.map(section => \n        section.id === sectionId ? { ...section, title: newTitle } : section\n      )\n    );\n  };\n\n  // Handle code example changes\n  const handleCodeExampleChange = (exampleId, field, value) => {\n    setEditedCodeExamples(prevExamples => \n      prevExamples.map(example => \n        example.id === exampleId ? { ...example, [field]: value } : example\n      )\n    );\n  };\n\n  // Handle cancelling editing mode\n  const handleCancelEditing = () => {\n    setIsEditing(false);\n    setEditedSections([]);\n    setEditedCodeExamples([]);\n    setEditedChapterTitle(\"\");\n    setEditedChapterDescription(\"\");\n  };\n\n  // Handle section content change - improved version\n  const handleSectionContentChange = (sectionId) => {\n    if (!sectionRefs.current[sectionId]) return;\n    \n    const updatedContent = sectionRefs.current[sectionId].innerHTML;\n    \n    // Find the section to update\n    setEditedSections(prevSections => \n      prevSections.map(section => \n        section.id === sectionId ? { ...section, content: updatedContent } : section\n      )\n    );\n  };\n\n  // Set up event listeners for all editable sections\n  useEffect(() => {\n    if (!isEditing || !chapterContent?.sections) return;\n    \n    // Create event listeners for all sections\n    const listeners = {};\n    \n    chapterContent.sections.forEach(section => {\n      const sectionId = section.id;\n      if (sectionRefs.current[sectionId]) {\n        const handleInput = () => handleSectionContentChange(sectionId);\n        sectionRefs.current[sectionId].addEventListener('input', handleInput);\n        listeners[sectionId] = handleInput;\n      }\n    });\n    \n    // Clean up listeners when component unmounts or editing state changes\n    return () => {\n      Object.entries(listeners).forEach(([sectionId, listener]) => {\n        if (sectionRefs.current[sectionId]) {\n          sectionRefs.current[sectionId].removeEventListener('input', listener);\n        }\n      });\n    };\n  }, [isEditing, chapterContent?.sections]);\n\n  // Improved handle save changes function\n  const handleSaveChanges = async () => {\n    if (!chapterContent) return;\n    \n    setSaveLoading(true);\n    \n    try {\n      // First, get the latest content from all section refs\n      const sectionsToUpdate = chapterContent.sections?.map(section => {\n        const sectionElement = sectionRefs.current[section.id];\n        const updatedContent = sectionElement ? sectionElement.innerHTML : section.content || \"\";\n        \n        // Look for any edited section title in the edited sections state\n        const editedSection = editedSections.find(s => s.id === section.id);\n        const updatedTitle = editedSection?.title || section.title || \"\";\n        \n        return {\n          ...section,\n          title: updatedTitle,\n          content: updatedContent\n        };\n      }) || [];\n      \n      // Get updated code examples\n      const codeExamplesToUpdate = chapterContent.codeExamples?.map(example => {\n        const codeElement = codeExampleRefs.current[`${example.id}-code`];\n        const updatedCode = codeElement ? codeElement.textContent : example.code || \"\";\n        \n        // Find any edited fields from the state\n        const editedExample = editedCodeExamples.find(e => e.id === example.id);\n        \n        return {\n          ...example,\n          title: editedExample?.title || example.title || \"\",\n          description: editedExample?.description || example.description || \"\",\n          explanation: editedExample?.explanation || example.explanation || \"\",\n          code: updatedCode,\n          language: editedExample?.language || example.language || \"\"\n        };\n      }) || [];\n      \n      // Create the updated chapter content object\n      const updatedChapterContent = {\n        ...chapterContent,\n        title: editedChapterTitle,\n        description: editedChapterDescription,\n        sections: sectionsToUpdate,\n        codeExamples: codeExamplesToUpdate\n      };\n      \n      // Debug log to see what we're sending\n      console.log(\"Saving updated content:\", updatedChapterContent);\n      \n      // Send update request to the server\n      const response = await axios.post(\n        `${URLSITE}/api/general/update-chapter`,\n        updatedChapterContent,\n        {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        }\n      );\n      \n      if (response.status === 200) {\n        // Update local state with the new content\n        setChapterContent(updatedChapterContent);\n        setIsEditing(false);\n        showSnackbar('Chapter content updated successfully!', 'success');\n      } else {\n        throw new Error('Failed to update chapter content');\n      }\n    } catch (error) {\n      console.error('Error saving chapter content:', error);\n      showSnackbar('Failed to save changes. Please try again.', 'error');\n    } finally {\n      setSaveLoading(false);\n    }\n  };\n  \n  // Render loading state\n  if (loading) {\n    return (\n      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '80vh' }}>\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  // Render error state if module or chapter not found\n  if (error || !module || !chapter) {\n    return (\n      <Box className=\"container page-container\" sx={{ textAlign: 'center', py: 8 }}>\n        <Typography variant=\"h5\">\n          {error || \"Content not found\"}\n        </Typography>\n        <Button component={Link} to=\"/modules\" sx={{ mt: 2 }}>\n          Back to Modules\n        </Button>\n      </Box>\n    );\n  }\n\n  // Calculate chapter navigation info\n  const currentIndex = module.chapters ? \n    module.chapters.findIndex(ch => ch.id === parseInt(chapterId, 10)) : -1;\n  const isFirstChapter = currentIndex === 0;\n  const isLastChapter = currentIndex === (module.chapters?.length - 1) || currentIndex === -1;\n  const prevChapter = !isFirstChapter && currentIndex !== -1 ? module.chapters[currentIndex - 1] : null;\n  const nextChapter = !isLastChapter && currentIndex !== -1 ? module.chapters[currentIndex + 1] : null;\n\n  // Check if user has admin rights\n  const isAdmin = context?.user?.email === 'verigeektech@gmail.com';\n\n  return (\n    <>\n    {\n      chapter && editedChapterDescription && <SEO \n      title={chapter?.title} description={editedChapterDescription || \"\"} \n      url={\"verigeek.xyz\"}\n      />\n    }\n      {/* Drawer for chapter navigation */}\n      <Drawer\n        anchor=\"left\"\n        open={drawerOpen}\n        onClose={toggleDrawer}\n      >\n        <Box sx={{ width: 300, p: 2 }}>\n          <Typography variant=\"h6\" sx={{ mb: 2 }}>\n            {context?.currentModule?.title || module.title}\n          </Typography>\n          <Divider sx={{ mb: 2 }} />\n          <List>\n            {module.chapters?.map(ch => {\n              const isCurrentChapter = ch.id === parseInt(chapterId, 10);\n              const isCompleted = getChapterProgress(moduleId, ch.id);\n              \n              return (\n                <ListItem \n                  key={ch.id}\n                  button \n                  component={Link}\n                  to={`/modules/${moduleId}/chapters/${ch.id}`}\n                  selected={isCurrentChapter}\n                  sx={{ \n                    borderRadius: 1,\n                    mb: 0.5,\n                    '&.Mui-selected': {\n                      bgcolor: 'primary.light',\n                      color: 'primary.contrastText',\n                    }\n                  }}\n                >\n                  {isCompleted && (\n                    <CheckCircle \n                      sx={{ \n                        mr: 1, \n                        fontSize: '1rem',\n                        color: 'success.main'\n                      }} \n                    />\n                  )}\n                  <ListItemText \n                    primary={`${ch.id}. ${ch.title}`} \n                    primaryTypographyProps={{\n                      fontWeight: isCurrentChapter ? 'bold' : 'normal',\n                      fontSize: '0.9rem'\n                    }}\n                  />\n                </ListItem>\n              );\n            })}\n          </List>\n        </Box>\n      </Drawer>\n\n      <Box className=\"container page-container\">\n        {/* Header with navigation */}\n        <Box sx={{ mb: 3, display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n          <Box sx={{ display: 'flex', alignItems: 'center' }}>\n            <IconButton onClick={toggleDrawer} sx={{ mr: 1 }}>\n              <Menu />\n            </IconButton>\n            <Breadcrumbs>\n              <Link to=\"/\" style={{ textDecoration: 'none', color: 'inherit' }}>\n                Home\n              </Link>\n              <Link to=\"/modules\" style={{ textDecoration: 'none', color: 'inherit' }}>\n                Modules\n              </Link>\n              <Link to={`/modules/${moduleId}`} style={{ textDecoration: 'none', color: 'inherit' }}>\n                {context?.currentModule?.title}\n              </Link>\n              <Typography color=\"text.primary\">\n                Chapter {chapter?.title}\n              </Typography>\n            </Breadcrumbs>\n          </Box>\n          <Button \n            component={Link} \n            to={`/modules/${moduleId}`}\n            startIcon={<ArrowBack />}\n          >\n            Back to Module\n          </Button>\n        </Box>\n\n        {/* Chapter progress indicator */}\n        <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 3 }}>\n          <Box sx={{ display: 'flex', alignItems: 'center' }}>\n            <MenuBook sx={{ mr: 1, color: 'primary.main' }} />\n            <Typography variant=\"subtitle1\">\n              Chapter {chapter?.title}\n              {isChapterCompleted && !isEditing && (\n                <Chip \n                  size=\"small\" \n                  icon={<CheckCircle />} \n                  label=\"Completed\" \n                  color=\"success\" \n                  sx={{ ml: 2 }}\n                />\n              )}\n            </Typography>\n          </Box>\n          <Box sx={{ display: 'flex', gap: 1 }}>\n            {/* Admin editing buttons */}\n            {isAdmin && !isEditing && (\n              <Button\n                variant=\"outlined\"\n                size=\"small\"\n                startIcon={<Edit />}\n                onClick={handleEnableEditing}\n              >\n                Edit Content\n              </Button>\n            )}\n            \n            {isEditing && (\n              <>\n                <Button\n                  variant=\"outlined\"\n                  size=\"small\"\n                  color=\"error\"\n                  startIcon={<Cancel />}\n                  onClick={handleCancelEditing}\n                >\n                  Cancel Editing\n                </Button>\n                <Button\n                  variant=\"contained\"\n                  size=\"small\"\n                  color=\"primary\"\n                  startIcon={<Save />}\n                  onClick={handleSaveChanges}\n                  disabled={saveLoading}\n                >\n                  {saveLoading ? 'Saving...' : 'Save Changes'}\n                </Button>\n              </>\n            )}\n            \n            {!isEditing && (\n              <>\n                {!isChapterCompleted && (\n                  <Button\n                    variant=\"outlined\"\n                    size=\"small\"\n                    startIcon={<CheckCircle />}\n                    onClick={markChapterCompleted}\n                  >\n                    Mark as Completed\n                  </Button>\n                )}\n                <Button\n                  variant=\"outlined\"\n                  size=\"small\"\n                  startIcon={isChapterBookmarked ? <Bookmark /> : <BookmarkBorder />}\n                  onClick={toggleChapterBookmark}\n                >\n                  {isChapterBookmarked ? 'Bookmarked' : 'Bookmark'}\n                </Button>\n              </>\n            )}\n          </Box>\n        </Box>\n\n        {/* Main content */}\n        <Paper elevation={0} sx={{ borderRadius: 2, overflow: 'hidden', mb: 4 }}>\n          {/* Chapter title */}\n          <Box sx={{ p: 4, pb: 2 }}>\n            {isEditing ? (\n              <>\n                <TextField\n                  fullWidth\n                  label=\"Chapter Title\"\n                  variant=\"outlined\"\n                  value={editedChapterTitle}\n                  onChange={(e) => setEditedChapterTitle(e.target.value)}\n                  sx={{ mb: 2 }}\n                  InputProps={{\n                    startAdornment: (\n                      <InputAdornment position=\"start\">\n                        <TitleIcon />\n                      </InputAdornment>\n                    ),\n                  }}\n                />\n                <TextField\n                  fullWidth\n                  label=\"Chapter Description\"\n                  variant=\"outlined\"\n                  value={editedChapterDescription}\n                  onChange={(e) => setEditedChapterDescription(e.target.value)}\n                  multiline\n                  rows={2}\n                  sx={{ mb: 2 }}\n                />\n              </>\n            ) : (\n              <>\n                <Typography variant=\"h4\" gutterBottom>\n                  {chapterContent?.title || chapter.title || \"\"}\n                </Typography>\n                <Typography variant=\"subtitle1\" color=\"text.secondary\" gutterBottom>\n                  {chapterContent?.description || \"\"}\n                </Typography>\n              </>\n            )}\n            \n            {chapterContent?.estimatedTime && (\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Estimated time: {chapterContent.estimatedTime}\n              </Typography>\n            )}\n          </Box>\n          \n          {/* Display each section content */}\n          {chapterContent?.sections?.map((section) => (\n            <Box key={section.id} sx={{ p: 4 }}>\n              {isEditing ? (\n                <TextField\n                  fullWidth\n                  label=\"Section Title\"\n                  variant=\"outlined\"\n                  defaultValue={section.title || \"\"}\n                  onChange={(e) => handleSectionTitleChange(section.id, e.target.value)}\n                  inputRef={el => sectionTitleRefs.current[section.id] = el}\n                  sx={{ mb: 2 }}\n                />\n              ) : (\n                <Typography variant=\"h5\" gutterBottom sx={{ mt: 2 }}>\n                  {section.title || \"Untitled Section\"}\n                </Typography>\n              )}\n              \n              <div\n                contentEditable={isEditing}\n                className={`prose prose-sm max-w-none bg-white p-4 border ${isEditing ? 'border-blue-500' : 'border-gray-200'} rounded text-[1.2rem]`}\n                dangerouslySetInnerHTML={{ __html: section.content || \"\" }}\n                ref={el => sectionRefs.current[section.id] = el}\n                suppressContentEditableWarning={true}\n                onBlur={() => isEditing && handleSectionContentChange(section.id)}\n              />\n            </Box>\n          ))}\n          \n          {/* Code examples section */}\n          {chapterContent?.codeExamples?.length > 0 && (\n            <Box sx={{ p: 4 }}>\n              <Typography variant=\"h5\" gutterBottom sx={{ mt: 2 }}>\n                Code Examples\n              </Typography>\n              {chapterContent.codeExamples.map((example) => (\n                <Box key={example.id} sx={{ mb: 4 }}>\n                  {isEditing ? (\n                    <>\n                      <TextField\n                        fullWidth\n                        label=\"Example Title\"\n                        variant=\"outlined\"\n                        defaultValue={example.title || \"\"}\n                        onChange={(e) => handleCodeExampleChange(example.id, 'title', e.target.value)}\n                        sx={{ mb: 2 }}\n                      />\n                      <TextField\n                        fullWidth\n                        label=\"Example Description\"\n                        variant=\"outlined\"\n                        defaultValue={example.description || \"\"}\n                        onChange={(e) => handleCodeExampleChange(example.id, 'description', e.target.value)}\n                        multiline\n                        rows={2}\n                        sx={{ mb: 2 }}\n                      />\n                    </>\n                  ) : (\n                    <>\n                      <Typography variant=\"h6\" gutterBottom>\n                        {example.title || \"Untitled Example\"}\n                      </Typography>\n                      <Typography variant=\"body2\" gutterBottom>\n                        {example.description || \"\"}\n                      </Typography>\n                    </>\n                  )}\n                  \n                  <pre className={`bg-gray-100 p-4 rounded overflow-auto ${isEditing ? 'border-2 border-blue-500' : ''}`}>\n                    <code\n                      className={example.language || \"\"}\n                      contentEditable={isEditing}\n                      suppressContentEditableWarning={true}\n                      ref={el => codeExampleRefs.current[`${example.id}-code`] = el}\n                    >{example.code || \"\"}</code>\n                  </pre>\n                  \n                  {example.explanation && (\n                    isEditing ? (\n                      <TextField\n                        fullWidth\n                        label=\"Example Explanation\"\n                        variant=\"outlined\"\n                        defaultValue={example.explanation}\n                        onChange={(e) => handleCodeExampleChange(example.id, 'explanation', e.target.value)}\n                        multiline\n                        rows={3}\n                        sx={{ mt: 2 }}\n                      />\n                    ) : (\n                      <Typography variant=\"body2\" sx={{ mt: 2 }}>\n                        {example.explanation}\n                      </Typography>\n                    )\n                  )}\n                </Box>\n              ))}\n            </Box>\n          )}\n          \n          {/* If no content is available, use the ChapterContent component as fallback */}\n          {(!chapterContent || (!chapterContent.sections?.length && !chapterContent.codeExamples?.length)) && (\n            <ChapterContent \n              chapter={chapter} \n              moduleId={moduleId} \n              onQuizCompletion={handleQuizCompletion}\n              onNextChapter={navigateToNextChapter}\n            />\n          )}\n        </Paper>\n        \n        {/* Floating Save Button when editing */}\n        {isEditing && (\n          <Box\n          sx={{\n            position: 'fixed',\n            bottom: 30,\n            right: 30,\n            zIndex: 1000,\n            display: 'flex',\n            gap: 2\n          }}\n        >\n          <Button\n            variant=\"contained\"\n            color=\"error\"\n            startIcon={<Cancel />}\n            onClick={handleCancelEditing}\n          >\n            Cancel\n          </Button>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            startIcon={<Save />}\n            onClick={handleSaveChanges}\n            disabled={saveLoading}\n          >\n            {saveLoading ? 'Saving...' : 'Save Changes'}\n          </Button>\n        </Box>)}\n\n\n        {/* Navigation buttons */}\n<Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 4 }}>\n  <Button \n    variant=\"outlined\"\n    startIcon={<NavigateBefore />}\n    // disabled={isFirstChapter}\n    // component={Link}\n    // to={prevChapter ? `/modules/${moduleId}/chapters/${prevChapter.id}` : '#'}\n    onClick={navigateToPrevChapter}\n  >\n    Previous Chapter\n  </Button>\n  <Button \n    variant=\"contained\"\n    endIcon={<NavigateNext />}\n    // disabled={isLastChapter}\n    // component={Link}\n    // to={nextChapter ? `/modules/${moduleId}/chapters/${nextChapter.id}` : '#'}\n    onClick={navigateToNextChapter}\n  >\n    Next Chapter\n  </Button>\n</Box>\n\n{/* Snackbar for notifications */}\n<Snackbar\n  open={snackbarOpen}\n  autoHideDuration={6000}\n  onClose={() => setSnackbarOpen(false)}\n>\n  <Alert \n    onClose={() => setSnackbarOpen(false)} \n    severity={snackbarSeverity}\n  >\n    {snackbarMessage}\n  </Alert>\n</Snackbar>\n</Box>\n</>\n);\n};\n\nexport default ChapterView;","/**\r\n * Progress Tracker Utility\r\n * \r\n * This utility provides functions to track and manage a user's progress through modules and chapters.\r\n * It uses localStorage to persist progress data across sessions.\r\n */\r\n\r\n/**\r\n * Initialize progress data for a module\r\n * @param {string} moduleId - The ID of the module\r\n * @param {Array} chapterIds - Array of chapter IDs in the module\r\n */\r\nexport const initializeProgressData = (moduleId, chapterIds) => {\r\n  try {\r\n    // Check if module progress already exists\r\n    const moduleProgress = localStorage.getItem(`module-progress-${moduleId}`);\r\n    \r\n    if (!moduleProgress) {\r\n      // Initialize module progress to 0\r\n      localStorage.setItem(`module-progress-${moduleId}`, '0');\r\n      \r\n      // Initialize chapter progress\r\n      chapterIds.forEach(chapterId => {\r\n        const chapterKey = `chapter-${moduleId}-${chapterId}`;\r\n        if (localStorage.getItem(chapterKey) === null) {\r\n          localStorage.setItem(chapterKey, 'false');\r\n        }\r\n      });\r\n    }\r\n  } catch (error) {\r\n    console.error('Error initializing progress data:', error);\r\n  }\r\n};\r\n\r\n/**\r\n * Update a chapter's completion status\r\n * @param {string} moduleId - The ID of the module\r\n * @param {string|number} chapterId - The ID of the chapter\r\n * @param {boolean} isCompleted - Whether the chapter is completed\r\n */\r\nexport const updateChapterProgress = (moduleId, chapterId, isCompleted) => {\r\n  try {\r\n    // Update chapter progress\r\n    const chapterKey = `chapter-${moduleId}-${chapterId}`;\r\n    localStorage.setItem(chapterKey, isCompleted.toString());\r\n    \r\n    // Update overall module progress\r\n    updateModuleProgress(moduleId);\r\n    \r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error updating chapter progress:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * Calculate and update the overall module completion percentage\r\n * @param {string} moduleId - The ID of the module\r\n */\r\nexport const updateModuleProgress = (moduleId) => {\r\n  try {\r\n    // Find all chapters for this module\r\n    const allChapterKeys = Object.keys(localStorage).filter(key => \r\n      key.startsWith(`chapter-${moduleId}-`)\r\n    );\r\n    \r\n    if (allChapterKeys.length === 0) return 0;\r\n    \r\n    // Calculate completion percentage\r\n    const completedChapters = allChapterKeys.filter(key => \r\n      localStorage.getItem(key) === 'true'\r\n    ).length;\r\n    \r\n    const percentage = Math.round((completedChapters / allChapterKeys.length) * 100);\r\n    \r\n    // Save to localStorage\r\n    localStorage.setItem(`module-progress-${moduleId}`, percentage.toString());\r\n    \r\n    return percentage;\r\n  } catch (error) {\r\n    console.error('Error updating module progress:', error);\r\n    return 0;\r\n  }\r\n};\r\n\r\n/**\r\n * Get a chapter's completion status\r\n * @param {string} moduleId - The ID of the module\r\n * @param {string|number} chapterId - The ID of the chapter\r\n * @returns {boolean} - Whether the chapter is completed\r\n */\r\nexport const getChapterProgress = (moduleId, chapterId) => {\r\n  try {\r\n    const chapterKey = `chapter-${moduleId}-${chapterId}`;\r\n    return localStorage.getItem(chapterKey) === 'true';\r\n  } catch (error) {\r\n    console.error('Error getting chapter progress:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * Get the overall module completion percentage\r\n * @param {string} moduleId - The ID of the module\r\n * @returns {number} - Percentage of module completion (0-100)\r\n */\r\nexport const getModuleProgress = (moduleId) => {\r\n  try {\r\n    const progress = localStorage.getItem(`module-progress-${moduleId}`);\r\n    return progress ? parseInt(progress, 10) : 0;\r\n  } catch (error) {\r\n    console.error('Error getting module progress:', error);\r\n    return 0;\r\n  }\r\n};\r\n\r\n/**\r\n * Mark a quiz as completed and update chapter progress\r\n * @param {string} moduleId - The ID of the module\r\n * @param {string|number} chapterId - The ID of the chapter\r\n * @param {number} score - The quiz score (0-100)\r\n * @returns {boolean} - Whether the operation was successful\r\n */\r\nexport const markQuizCompleted = (moduleId, chapterId, score) => {\r\n  try {\r\n    // Save quiz score\r\n    const quizKey = `quiz-${moduleId}-${chapterId}`;\r\n    localStorage.setItem(quizKey, score.toString());\r\n    \r\n    // Mark chapter as completed if score is passing (>=70%)\r\n    if (score >= 70) {\r\n      updateChapterProgress(moduleId, chapterId, true);\r\n    }\r\n    \r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error marking quiz completed:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * Get the quiz score for a chapter\r\n * @param {string} moduleId - The ID of the module\r\n * @param {string|number} chapterId - The ID of the chapter\r\n * @returns {number|null} - The quiz score (0-100) or null if not taken\r\n */\r\nexport const getQuizScore = (moduleId, chapterId) => {\r\n  try {\r\n    const quizKey = `quiz-${moduleId}-${chapterId}`;\r\n    const score = localStorage.getItem(quizKey);\r\n    return score ? parseFloat(score) : null;\r\n  } catch (error) {\r\n    console.error('Error getting quiz score:', error);\r\n    return null;\r\n  }\r\n}; ","import React, { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { \n  Box, Typography, Paper, Accordion, AccordionSummary, AccordionDetails,\n  Divider, Button, Grid, Card, CardContent, CardMedia, CardActionArea, \n  Chip, Radio, RadioGroup, FormControlLabel, FormControl, Alert, Snackbar\n} from '@mui/material';\nimport { \n  ExpandMore, PlayArrow, Code, Quiz, Check, VideoLibrary,\n  Assignment, BookmarkBorder, Bookmark, ArrowForward, Close\n} from '@mui/icons-material';\nimport { markQuizCompleted } from '../utils/progressTracker';\n\nconst ChapterContent = ({ chapter, moduleId, onQuizCompletion, onNextChapter }) => {\n  const [searchParams] = useSearchParams();\n  const [expandedSection, setExpandedSection] = useState(null);\n  const [quizAnswers, setQuizAnswers] = useState({});\n  const [quizSubmitted, setQuizSubmitted] = useState(false);\n  const [bookmarked, setBookmarked] = useState([]);\n  const [progress, setProgress] = useState(0);\n  const [sectionProgress, setSectionProgress] = useState({});\n  const [snackbarOpen, setSnackbarOpen] = useState(false);\n  const [snackbarMessage, setSnackbarMessage] = useState('');\n  const [activeTab, setActiveTab] = useState('content');\n  const [quizScore, setQuizScore] = useState(0);\n  const [quizPassed, setQuizPassed] = useState(false);\n\n  // Check if the chapter has quiz questions in either chapter.quiz.questions or chapter.questions\n  const hasQuiz = Boolean(\n    (chapter.quiz && chapter.quiz.questions && chapter.quiz.questions.length > 0) ||\n    (chapter.questions && chapter.questions.length > 0)\n  );\n\n  // Get the questions from the correct location\n  const getQuizQuestions = () => {\n    if (chapter.quiz && chapter.quiz.questions) {\n      return chapter.quiz.questions;\n    } else if (chapter.questions) {\n      return chapter.questions;\n    }\n    return [];\n  };\n\n  const quizQuestions = getQuizQuestions();\n  const quizTitle = chapter.quiz?.title || `${chapter.title} Quiz`;\n  const quizDescription = chapter.quiz?.description || 'Test your knowledge of this chapter\\'s content.';\n\n  useEffect(() => {\n    // Load bookmarks from localStorage\n    const savedBookmarks = localStorage.getItem(`bookmarks-${moduleId}-${chapter.id}`);\n    if (savedBookmarks) {\n      setBookmarked(JSON.parse(savedBookmarks));\n    }\n    \n    // Load progress from localStorage\n    const savedProgress = localStorage.getItem(`progress-${moduleId}-${chapter.id}`);\n    if (savedProgress) {\n      setSectionProgress(JSON.parse(savedProgress));\n      \n      // Calculate overall progress\n      const progressObj = JSON.parse(savedProgress);\n      const completedSections = Object.values(progressObj).filter(val => val).length;\n      const totalSections = chapter.sections && Array.isArray(chapter.sections) ? chapter.sections.length : 0;\n      if (totalSections > 0) {\n        setProgress(Math.round((completedSections / totalSections) * 100));\n      }\n    }\n  }, [moduleId, chapter.id, chapter.sections]);\n\n  // Set active tab based on URL parameters\n  useEffect(() => {\n    const tabParam = searchParams.get('tab');\n    if (tabParam && (tabParam === 'content' || tabParam === 'quiz')) {\n      setActiveTab(tabParam);\n    }\n  }, [searchParams]);\n\n  const handleSectionChange = (sectionId) => {\n    setExpandedSection(expandedSection === sectionId ? null : sectionId);\n    \n    // Mark section as read when expanded\n    if (expandedSection !== sectionId && !sectionProgress[sectionId]) {\n      const updatedProgress = { ...sectionProgress, [sectionId]: true };\n      setSectionProgress(updatedProgress);\n      \n      // Save progress to localStorage\n      localStorage.setItem(`progress-${moduleId}-${chapter.id}`, JSON.stringify(updatedProgress));\n      \n      // Update overall progress\n      const completedSections = Object.values(updatedProgress).filter(val => val).length;\n      const totalSections = chapter.sections && Array.isArray(chapter.sections) ? chapter.sections.length : 0;\n      if (totalSections > 0) {\n        setProgress(Math.round((completedSections / totalSections) * 100));\n      }\n    }\n  };\n\n  const handleAnswerChange = (questionId, value) => {\n    setQuizAnswers(prev => ({\n      ...prev,\n      [questionId]: value\n    }));\n  };\n\n  const handleQuizSubmit = () => {\n    // Calculate the score\n    let correctCount = 0;\n    let totalQuestions = 0;\n    \n    if (quizQuestions.length > 0) {\n      totalQuestions = quizQuestions.length;\n      \n      quizQuestions.forEach((question, index) => {\n        const questionId = question.id || index;\n        if (quizAnswers[questionId] === question.correctAnswer) {\n          correctCount++;\n        }\n      });\n    }\n    \n    const score = totalQuestions > 0 ? (correctCount / totalQuestions) * 100 : 0;\n    const passed = score >= 70; // Pass threshold is 70%\n    \n    setQuizScore(score);\n    setQuizPassed(passed);\n    setQuizSubmitted(true);\n    \n    // Save the quiz result to localStorage\n    if (passed) {\n      markQuizCompleted(moduleId, chapter.id, score);\n    }\n    \n    // Notify the parent component\n    if (onQuizCompletion) {\n      onQuizCompletion(passed, score);\n    }\n  };\n\n  const resetQuiz = () => {\n    setQuizAnswers({});\n    setQuizSubmitted(false);\n    setQuizScore(0);\n    setQuizPassed(false);\n  };\n\n  const toggleBookmark = (sectionId) => {\n    let updatedBookmarks;\n    if (bookmarked.includes(sectionId)) {\n      updatedBookmarks = bookmarked.filter(id => id !== sectionId);\n      setSnackbarMessage('Bookmark removed');\n    } else {\n      updatedBookmarks = [...bookmarked, sectionId];\n      setSnackbarMessage('Bookmark added - you can access this later from your profile');\n    }\n    \n    setBookmarked(updatedBookmarks);\n    localStorage.setItem(`bookmarks-${moduleId}-${chapter.id}`, JSON.stringify(updatedBookmarks));\n    setSnackbarOpen(true);\n  };\n\n  const handleNextChapter = () => {\n    if (onNextChapter) {\n      onNextChapter();\n    }\n  };\n\n  if (!chapter) {\n    return <Box sx={{ p: 3 }}><Typography>Chapter not found</Typography></Box>;\n  }\n\n  // Check if sections exist and provide a fallback message if not\n  const hasNoSections = !chapter.sections || !Array.isArray(chapter.sections) || chapter.sections.length === 0;\n\n  return (\n    <Box>\n      <Box sx={{ p: 3, bgcolor: 'primary.main', color: 'white' }}>\n        <Typography variant=\"h4\" gutterBottom>{chapter.title}</Typography>\n        <Typography variant=\"subtitle1\">{chapter.description}</Typography>\n      </Box>\n      \n      <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\n        <Box sx={{ display: 'flex' }}>\n          <Button \n            onClick={() => setActiveTab('content')}\n            sx={{ \n              py: 2, \n              px: 3, \n              borderBottom: activeTab === 'content' ? '2px solid' : 'none',\n              borderColor: 'primary.main',\n              color: activeTab === 'content' ? 'primary.main' : 'text.primary',\n              borderRadius: 0,\n              fontWeight: activeTab === 'content' ? 'bold' : 'normal'\n            }}\n          >\n            Content\n          </Button>\n          {hasQuiz && (\n            <Button \n              onClick={() => setActiveTab('quiz')}\n              sx={{ \n                py: 2, \n                px: 3, \n                borderBottom: activeTab === 'quiz' ? '2px solid' : 'none',\n                borderColor: 'primary.main',\n                color: activeTab === 'quiz' ? 'primary.main' : 'text.primary',\n                borderRadius: 0,\n                fontWeight: activeTab === 'quiz' ? 'bold' : 'normal'\n              }}\n            >\n              Quiz\n            </Button>\n          )}\n        </Box>\n      </Box>\n      \n      <Box sx={{ p: 3 }}>\n        {activeTab === 'content' ? (\n          <>\n            {hasNoSections ? (\n              <Paper elevation={0} variant=\"outlined\" sx={{ p: 3, borderRadius: 2, textAlign: 'center' }}>\n                <Typography variant=\"h6\" gutterBottom>Content Coming Soon</Typography>\n                <Typography variant=\"body1\">\n                  The content for this chapter is currently being developed. \n                  Please check back later for updates.\n                </Typography>\n              </Paper>\n            ) : (\n              chapter.sections.map((section) => (\n                <Accordion \n                  key={section.id}\n                  expanded={expandedSection === section.id}\n                  onChange={() => handleSectionChange(section.id)}\n                  sx={{ \n                    mb: 2, \n                    overflow: 'hidden',\n                    bgcolor: sectionProgress[section.id] ? 'rgba(76, 175, 80, 0.04)' : 'transparent',\n                    position: 'relative'\n                  }}\n                >\n                  <AccordionSummary expandIcon={<ExpandMore />} sx={{ bgcolor: 'action.hover' }}>\n                    <Box sx={{ display: 'flex', alignItems: 'center', width: '100%', justifyContent: 'space-between' }}>\n                      <Typography sx={{ fontWeight: expandedSection === section.id ? 'bold' : 'normal' }}>\n                        {section.id} - {section.title}\n                        {sectionProgress[section.id] && (\n                          <Chip\n                            label=\"Completed\"\n                            size=\"small\"\n                            color=\"success\"\n                            sx={{ ml: 2, height: 20, fontSize: '0.6rem' }}\n                          />\n                        )}\n                      </Typography>\n                      <Button \n                        size=\"small\" \n                        onClick={(e) => {\n                          e.stopPropagation();\n                          toggleBookmark(section.id);\n                        }}\n                        startIcon={bookmarked.includes(section.id) ? <Bookmark color=\"primary\" /> : <BookmarkBorder />}\n                        sx={{ ml: 2 }}\n                      >\n                        {bookmarked.includes(section.id) ? 'Bookmarked' : 'Bookmark'}\n                      </Button>\n                    </Box>\n                  </AccordionSummary>\n                  <AccordionDetails>\n                    <Box sx={{ p: 1 }} dangerouslySetInnerHTML={{ __html: section.content }} />\n                  </AccordionDetails>\n                </Accordion>\n              ))\n            )}\n            \n            {bookmarked.length > 0 && !hasNoSections && (\n              <Box sx={{ mt: 4, mb: 4 }}>\n                <Typography variant=\"h6\" gutterBottom>\n                  Your Bookmarked Sections\n                </Typography>\n                <Paper elevation={0} variant=\"outlined\" sx={{ p: 2, borderRadius: 2 }}>\n                  <Grid container spacing={2}>\n                    {bookmarked.map(bookmarkId => {\n                      const section = chapter.sections.find(s => s.id === bookmarkId);\n                      if (!section) return null;\n                      \n                      return (\n                        <Grid item xs={12} sm={6} md={4} key={bookmarkId}>\n                          <Paper \n                            variant=\"outlined\" \n                            sx={{ \n                              p: 2, \n                              cursor: 'pointer',\n                              '&:hover': { bgcolor: 'rgba(0, 0, 0, 0.03)' }\n                            }}\n                            onClick={() => {\n                              setExpandedSection(bookmarkId);\n                              setTimeout(() => {\n                                document.getElementById(`section-${bookmarkId}`)?.scrollIntoView({ behavior: 'smooth' });\n                              }, 100);\n                            }}\n                          >\n                            <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                              <Bookmark color=\"primary\" sx={{ mr: 1, fontSize: '1rem' }} />\n                              <Typography variant=\"body2\" fontWeight=\"medium\">\n                                {section.title}\n                              </Typography>\n                            </Box>\n                          </Paper>\n                        </Grid>\n                      );\n                    })}\n                  </Grid>\n                </Paper>\n              </Box>\n            )}\n            \n            {chapter.examples && chapter.examples.length > 0 && (\n              <>\n                <Typography variant=\"h5\" gutterBottom sx={{ mt: 4, mb: 2 }}>\n                  Code Examples\n                </Typography>\n                \n                <Grid container spacing={3}>\n                  {chapter.examples.map((example) => (\n                    <Grid item xs={12} md={6} key={example.id}>\n                      <Paper elevation={2} sx={{ borderRadius: 2, overflow: 'hidden' }}>\n                        <Box sx={{ bgcolor: 'primary.main', color: 'primary.contrastText', p: 2, display: 'flex', alignItems: 'center' }}>\n                          <Code sx={{ mr: 1 }} />\n                          <Typography variant=\"h6\">{example.title}</Typography>\n                        </Box>\n                        <Box sx={{ p: 2 }}>\n                          <Typography variant=\"body2\" paragraph>{example.description}</Typography>\n                          <Paper variant=\"outlined\" sx={{ \n                            p: 2, \n                            bgcolor: '#272822', \n                            color: '#f8f8f2', \n                            fontFamily: 'monospace',\n                            whiteSpace: 'pre-wrap',\n                            overflowX: 'auto',\n                            fontSize: '0.875rem'\n                          }}>\n                            {example.code}\n                          </Paper>\n                          <Typography variant=\"subtitle2\" sx={{ mt: 2, fontWeight: 'bold' }}>Explanation:</Typography>\n                          <Typography variant=\"body2\">{example.explanation}</Typography>\n                        </Box>\n                      </Paper>\n                    </Grid>\n                  ))}\n                </Grid>\n              </>\n            )}\n            \n            {chapter.videos && chapter.videos.length > 0 && (\n              <>\n                <Typography variant=\"h5\" gutterBottom sx={{ mt: 4, mb: 2 }}>\n                  Video Resources\n                </Typography>\n                \n                <Grid container spacing={3}>\n                  {chapter.videos.map((video) => (\n                    <Grid item xs={12} sm={6} md={4} key={video.id}>\n                      <Card sx={{ height: '100%', display: 'flex', flexDirection: 'column' }}>\n                        <CardActionArea component=\"a\" href={video.url} target=\"_blank\" rel=\"noopener noreferrer\">\n                          <Box sx={{ position: 'relative' }}>\n                            <CardMedia\n                              component=\"img\"\n                              height=\"140\"\n                              image={video.thumbnail}\n                              alt={video.title}\n                            />\n                            <Box sx={{ \n                              position: 'absolute', \n                              top: 0, \n                              left: 0, \n                              width: '100%', \n                              height: '100%', \n                              display: 'flex', \n                              alignItems: 'center', \n                              justifyContent: 'center',\n                              background: 'rgba(0,0,0,0.3)',\n                              transition: 'background 0.3s',\n                              '&:hover': { background: 'rgba(0,0,0,0.5)' }\n                            }}>\n                              <PlayArrow sx={{ fontSize: 60, color: 'white' }} />\n                            </Box>\n                          </Box>\n                        </CardActionArea>\n                      </Card>\n                    </Grid>\n                  ))}\n                </Grid>\n              </>\n            )}\n          </>\n        ) : (\n          <>\n            <Typography variant=\"h5\" gutterBottom sx={{ mb: 2 }}>\n              Chapter Quiz\n            </Typography>\n            \n            <Paper sx={{ p: 3, borderRadius: 2 }}>\n              <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\n                <Quiz sx={{ mr: 1, color: 'primary.main' }} />\n                <Typography variant=\"h6\">{quizTitle}</Typography>\n              </Box>\n              \n              <Typography variant=\"body2\" paragraph>\n                {quizDescription}\n              </Typography>\n              \n              {quizSubmitted && quizScore && (\n                <Alert \n                  severity={quizPassed ? \"success\" : \"warning\"} \n                  sx={{ mb: 3 }}\n                >\n                  <Typography variant=\"subtitle2\">\n                    {quizPassed \n                      ? \"Congratulations! You passed the quiz.\" \n                      : \"You need to review this chapter again.\"}\n                  </Typography>\n                  <Typography variant=\"body2\">\n                    Your score: {quizScore.toFixed(1)}%\n                  </Typography>\n                </Alert>\n              )}\n              \n              {quizQuestions.map((question, index) => {\n                const questionId = question.id || index;\n                return (\n                  <Box key={questionId} sx={{ mb: 3, pb: 3, borderBottom: index < quizQuestions.length - 1 ? '1px solid #e0e0e0' : 'none' }}>\n                    <Typography variant=\"subtitle1\" gutterBottom>\n                      {index + 1}. {question.question}\n                    </Typography>\n                    \n                    <FormControl component=\"fieldset\" sx={{ ml: 2 }}>\n                      <RadioGroup\n                        value={quizAnswers[questionId] || ''}\n                        onChange={(e) => handleAnswerChange(questionId, Number(e.target.value))}\n                      >\n                        {question.options.map((option, optIndex) => {\n                          // Handle both array of strings and array of objects\n                          const optionId = typeof option === 'object' ? option.id : optIndex;\n                          const optionText = typeof option === 'object' ? option.text : option;\n                          \n                          return (\n                            <FormControlLabel\n                              key={optionId}\n                              value={optionId}\n                              control={<Radio />}\n                              label={optionText}\n                              disabled={quizSubmitted}\n                              sx={{\n                                ...(quizSubmitted && optionId === question.correctAnswer && {\n                                  color: 'success.main',\n                                  fontWeight: 'bold'\n                                }),\n                                ...(quizSubmitted && quizAnswers[questionId] === optionId && quizAnswers[questionId] !== question.correctAnswer && {\n                                  color: 'error.main'\n                                })\n                              }}\n                            />\n                          );\n                        })}\n                      </RadioGroup>\n                    </FormControl>\n                    \n                    {quizSubmitted && (\n                      <Box sx={{ mt: 1, ml: 2 }}>\n                        {quizAnswers[questionId] === question.correctAnswer ? (\n                          <Typography variant=\"body2\" sx={{ color: 'success.main', display: 'flex', alignItems: 'center' }}>\n                            <Check fontSize=\"small\" sx={{ mr: 0.5 }} />\n                            Correct!\n                          </Typography>\n                        ) : (\n                          <Typography variant=\"body2\" sx={{ color: 'error.main' }}>\n                            Incorrect. The correct answer is: {\n                              typeof question.options[question.correctAnswer] === 'object' \n                                ? question.options[question.correctAnswer]?.text \n                                : question.options[question.correctAnswer]\n                            }\n                          </Typography>\n                        )}\n                        \n                        <Typography variant=\"body2\" sx={{ mt: 1, fontStyle: 'italic' }}>\n                          {question.explanation}\n                        </Typography>\n                      </Box>\n                    )}\n                  </Box>\n                );\n              })}\n              \n              <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 3 }}>\n                {quizSubmitted ? (\n                  <Button \n                    variant=\"outlined\" \n                    onClick={resetQuiz} \n                    startIcon={<Assignment />}\n                  >\n                    Retake Quiz\n                  </Button>\n                ) : (\n                  <Button \n                    variant=\"contained\" \n                    onClick={handleQuizSubmit} \n                    startIcon={<Check />}\n                    disabled={Object.keys(quizAnswers).length !== quizQuestions.length}\n                  >\n                    Submit Answers\n                  </Button>\n                )}\n                \n                <Button \n                  variant=\"outlined\" \n                  onClick={handleNextChapter} \n                  endIcon={<ArrowForward />}\n                >\n                  Next Chapter\n                </Button>\n              </Box>\n            </Paper>\n          </>\n        )}\n      </Box>\n      \n      <Snackbar\n        open={snackbarOpen}\n        autoHideDuration={3000}\n        onClose={() => setSnackbarOpen(false)}\n        message={snackbarMessage}\n      />\n    </Box>\n  );\n};\n\nexport default ChapterContent; "],"names":["createSvgIcon","_jsx","d","verilogLang","require","hljs","registerLanguage","error","console","warn","ChapterView","_module$chapters","_context$user","_context$currentModul3","_module$chapters2","_context$currentModul4","_chapterContent$secti2","_chapterContent$codeE2","_chapterContent$secti3","_chapterContent$codeE3","moduleId","chapterId","useParams","navigate","useNavigate","module","setModule","useState","chapter","setChapter","chapterContent","setChapterContent","loading","setLoading","drawerOpen","setDrawerOpen","isChapterBookmarked","setIsChapterBookmarked","isChapterCompleted","setIsChapterCompleted","snackbarOpen","setSnackbarOpen","snackbarMessage","setSnackbarMessage","snackbarSeverity","setSnackbarSeverity","setError","isAuthenticated","setIsAuthenticated","progress","setProgress","context","useContext","AuthContext","isEditing","setIsEditing","saveLoading","setSaveLoading","sectionRefs","useRef","sectionTitleRefs","codeExampleRefs","editedSections","setEditedSections","editedCodeExamples","setEditedCodeExamples","editedChapterTitle","setEditedChapterTitle","editedChapterDescription","setEditedChapterDescription","useEffect","current","navigateToNextChapter","_context$currentModul","currentModule","chapters","nextIndex","currentChapterIndex","_context$setCurrentCh","length","setCurrentChapterIndex","call","moduleType","user","async","_context$user$wholeDa","response","axios","post","URLSITE","email","wholeData","_response$data$paidMo","status","data","paidModule","some","mod","err","checkModuleAccess","setTimeout","document","querySelectorAll","forEach","block","highlightBlock","moduleData","getModuleById","Error","get","title","description","id","message","chapterIdNum","parseInt","fallbackChapter","find","c","sections","codeExamples","progressResponse","progressErr","isBookmarked","JSON","parse","localStorage","getItem","bookmark","isCompleted","getChapterProgress","fetchModuleAndChapter","toggleDrawer","showSnackbar","severity","arguments","undefined","handleCodeExampleChange","exampleId","field","value","prevExamples","map","example","handleCancelEditing","handleSectionContentChange","sectionId","updatedContent","innerHTML","prevSections","section","content","listeners","handleInput","addEventListener","Object","entries","_ref","listener","removeEventListener","handleSaveChanges","_chapterContent$secti","_chapterContent$codeE","sectionsToUpdate","sectionElement","editedSection","s","updatedTitle","codeExamplesToUpdate","codeElement","updatedCode","textContent","code","editedExample","e","explanation","language","updatedChapterContent","log","headers","Box","sx","display","justifyContent","alignItems","height","children","CircularProgress","_jsxs","className","textAlign","py","Typography","variant","Button","component","Link","to","mt","currentIndex","findIndex","ch","isFirstChapter","isLastChapter","isAdmin","_Fragment","SEO","url","Drawer","anchor","open","onClose","width","p","mb","Divider","List","isCurrentChapter","ListItem","button","selected","borderRadius","bgcolor","color","CheckCircle","mr","fontSize","ListItemText","primary","primaryTypographyProps","fontWeight","IconButton","onClick","Menu","Breadcrumbs","style","textDecoration","startIcon","ArrowBack","MenuBook","Chip","size","icon","label","ml","gap","Edit","handleEnableEditing","Cancel","Save","disabled","markChapterCompleted","updateChapterProgress","Bookmark","BookmarkBorder","toggleChapterBookmark","bookmarkedChapters","bookmarkData","toString","moduleTitle","chapterTitle","timestamp","Date","toISOString","updatedBookmarks","filter","setItem","stringify","push","Paper","elevation","overflow","pb","TextField","fullWidth","onChange","target","InputProps","startAdornment","InputAdornment","position","TitleIcon","multiline","rows","gutterBottom","estimatedTime","defaultValue","handleSectionTitleChange","newTitle","inputRef","el","contentEditable","dangerouslySetInnerHTML","__html","ref","suppressContentEditableWarning","onBlur","ChapterContent","onQuizCompletion","passed","onNextChapter","bottom","right","zIndex","NavigateBefore","navigateToPrevChapter","_context$currentModul2","prevIndex","_context$setCurrentCh2","endIcon","NavigateNext","Snackbar","autoHideDuration","Alert","chapterKey","updateModuleProgress","allChapterKeys","keys","key","startsWith","completedChapters","percentage","Math","round","markQuizCompleted","score","quizKey","_chapter$quiz","_chapter$quiz2","searchParams","useSearchParams","expandedSection","setExpandedSection","quizAnswers","setQuizAnswers","quizSubmitted","setQuizSubmitted","bookmarked","setBookmarked","sectionProgress","setSectionProgress","activeTab","setActiveTab","quizScore","setQuizScore","quizPassed","setQuizPassed","hasQuiz","Boolean","quiz","questions","quizQuestions","quizTitle","quizDescription","savedBookmarks","savedProgress","progressObj","completedSections","values","val","totalSections","Array","isArray","tabParam","hasNoSections","borderBottom","borderColor","px","Accordion","expanded","updatedProgress","handleSectionChange","AccordionSummary","expandIcon","ExpandMore","stopPropagation","includes","toggleBookmark","AccordionDetails","Grid","container","spacing","bookmarkId","item","xs","sm","md","cursor","_document$getElementB","getElementById","scrollIntoView","behavior","examples","Code","paragraph","fontFamily","whiteSpace","overflowX","videos","video","Card","flexDirection","CardActionArea","href","rel","CardMedia","image","thumbnail","alt","top","left","background","transition","PlayArrow","Quiz","toFixed","question","index","_question$options$que","questionId","FormControl","RadioGroup","handleAnswerChange","prev","Number","options","option","optIndex","optionId","optionText","text","FormControlLabel","control","Radio","correctAnswer","Check","fontStyle","resetQuiz","Assignment","handleQuizSubmit","correctCount","totalQuestions","handleNextChapter","ArrowForward"],"sourceRoot":""}