{"version":3,"file":"static/js/542.78572de3.chunk.js","mappings":"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","sources":["utils/progressTracker.js","components/ChapterContent.jsx","pages/ChapterView.jsx"],"sourcesContent":["/**\r\n * Progress Tracker Utility\r\n * \r\n * This utility provides functions to track and manage a user's progress through modules and chapters.\r\n * It uses localStorage to persist progress data across sessions.\r\n */\r\n\r\n/**\r\n * Initialize progress data for a module\r\n * @param {string} moduleId - The ID of the module\r\n * @param {Array} chapterIds - Array of chapter IDs in the module\r\n */\r\nexport const initializeProgressData = (moduleId, chapterIds) => {\r\n  try {\r\n    // Check if module progress already exists\r\n    const moduleProgress = localStorage.getItem(`module-progress-${moduleId}`);\r\n    \r\n    if (!moduleProgress) {\r\n      // Initialize module progress to 0\r\n      localStorage.setItem(`module-progress-${moduleId}`, '0');\r\n      \r\n      // Initialize chapter progress\r\n      chapterIds.forEach(chapterId => {\r\n        const chapterKey = `chapter-${moduleId}-${chapterId}`;\r\n        if (localStorage.getItem(chapterKey) === null) {\r\n          localStorage.setItem(chapterKey, 'false');\r\n        }\r\n      });\r\n    }\r\n  } catch (error) {\r\n    console.error('Error initializing progress data:', error);\r\n  }\r\n};\r\n\r\n/**\r\n * Update a chapter's completion status\r\n * @param {string} moduleId - The ID of the module\r\n * @param {string|number} chapterId - The ID of the chapter\r\n * @param {boolean} isCompleted - Whether the chapter is completed\r\n */\r\nexport const updateChapterProgress = (moduleId, chapterId, isCompleted) => {\r\n  try {\r\n    // Update chapter progress\r\n    const chapterKey = `chapter-${moduleId}-${chapterId}`;\r\n    localStorage.setItem(chapterKey, isCompleted.toString());\r\n    \r\n    // Update overall module progress\r\n    updateModuleProgress(moduleId);\r\n    \r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error updating chapter progress:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * Calculate and update the overall module completion percentage\r\n * @param {string} moduleId - The ID of the module\r\n */\r\nexport const updateModuleProgress = (moduleId) => {\r\n  try {\r\n    // Find all chapters for this module\r\n    const allChapterKeys = Object.keys(localStorage).filter(key => \r\n      key.startsWith(`chapter-${moduleId}-`)\r\n    );\r\n    \r\n    if (allChapterKeys.length === 0) return 0;\r\n    \r\n    // Calculate completion percentage\r\n    const completedChapters = allChapterKeys.filter(key => \r\n      localStorage.getItem(key) === 'true'\r\n    ).length;\r\n    \r\n    const percentage = Math.round((completedChapters / allChapterKeys.length) * 100);\r\n    \r\n    // Save to localStorage\r\n    localStorage.setItem(`module-progress-${moduleId}`, percentage.toString());\r\n    \r\n    return percentage;\r\n  } catch (error) {\r\n    console.error('Error updating module progress:', error);\r\n    return 0;\r\n  }\r\n};\r\n\r\n/**\r\n * Get a chapter's completion status\r\n * @param {string} moduleId - The ID of the module\r\n * @param {string|number} chapterId - The ID of the chapter\r\n * @returns {boolean} - Whether the chapter is completed\r\n */\r\nexport const getChapterProgress = (moduleId, chapterId) => {\r\n  try {\r\n    const chapterKey = `chapter-${moduleId}-${chapterId}`;\r\n    return localStorage.getItem(chapterKey) === 'true';\r\n  } catch (error) {\r\n    console.error('Error getting chapter progress:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * Get the overall module completion percentage\r\n * @param {string} moduleId - The ID of the module\r\n * @returns {number} - Percentage of module completion (0-100)\r\n */\r\nexport const getModuleProgress = (moduleId) => {\r\n  try {\r\n    const progress = localStorage.getItem(`module-progress-${moduleId}`);\r\n    return progress ? parseInt(progress, 10) : 0;\r\n  } catch (error) {\r\n    console.error('Error getting module progress:', error);\r\n    return 0;\r\n  }\r\n};\r\n\r\n/**\r\n * Mark a quiz as completed and update chapter progress\r\n * @param {string} moduleId - The ID of the module\r\n * @param {string|number} chapterId - The ID of the chapter\r\n * @param {number} score - The quiz score (0-100)\r\n * @returns {boolean} - Whether the operation was successful\r\n */\r\nexport const markQuizCompleted = (moduleId, chapterId, score) => {\r\n  try {\r\n    // Save quiz score\r\n    const quizKey = `quiz-${moduleId}-${chapterId}`;\r\n    localStorage.setItem(quizKey, score.toString());\r\n    \r\n    // Mark chapter as completed if score is passing (>=70%)\r\n    if (score >= 70) {\r\n      updateChapterProgress(moduleId, chapterId, true);\r\n    }\r\n    \r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error marking quiz completed:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * Get the quiz score for a chapter\r\n * @param {string} moduleId - The ID of the module\r\n * @param {string|number} chapterId - The ID of the chapter\r\n * @returns {number|null} - The quiz score (0-100) or null if not taken\r\n */\r\nexport const getQuizScore = (moduleId, chapterId) => {\r\n  try {\r\n    const quizKey = `quiz-${moduleId}-${chapterId}`;\r\n    const score = localStorage.getItem(quizKey);\r\n    return score ? parseFloat(score) : null;\r\n  } catch (error) {\r\n    console.error('Error getting quiz score:', error);\r\n    return null;\r\n  }\r\n}; ","import React, { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { \n  Box, Typography, Paper, Accordion, AccordionSummary, AccordionDetails,\n  Divider, Button, Grid, Card, CardContent, CardMedia, CardActionArea, \n  Chip, Radio, RadioGroup, FormControlLabel, FormControl, Alert, Snackbar\n} from '@mui/material';\nimport { \n  ExpandMore, PlayArrow, Code, Quiz, Check, VideoLibrary,\n  Assignment, BookmarkBorder, Bookmark, ArrowForward, Close\n} from '@mui/icons-material';\nimport { markQuizCompleted } from '../utils/progressTracker';\n\nconst ChapterContent = ({ chapter, moduleId, onQuizCompletion, onNextChapter }) => {\n  const [searchParams] = useSearchParams();\n  const [expandedSection, setExpandedSection] = useState(null);\n  const [quizAnswers, setQuizAnswers] = useState({});\n  const [quizSubmitted, setQuizSubmitted] = useState(false);\n  const [bookmarked, setBookmarked] = useState([]);\n  const [progress, setProgress] = useState(0);\n  const [sectionProgress, setSectionProgress] = useState({});\n  const [snackbarOpen, setSnackbarOpen] = useState(false);\n  const [snackbarMessage, setSnackbarMessage] = useState('');\n  const [activeTab, setActiveTab] = useState('content');\n  const [quizScore, setQuizScore] = useState(0);\n  const [quizPassed, setQuizPassed] = useState(false);\n\n  // Check if the chapter has quiz questions in either chapter.quiz.questions or chapter.questions\n  const hasQuiz = Boolean(\n    (chapter.quiz && chapter.quiz.questions && chapter.quiz.questions.length > 0) ||\n    (chapter.questions && chapter.questions.length > 0)\n  );\n\n  // Get the questions from the correct location\n  const getQuizQuestions = () => {\n    if (chapter.quiz && chapter.quiz.questions) {\n      return chapter.quiz.questions;\n    } else if (chapter.questions) {\n      return chapter.questions;\n    }\n    return [];\n  };\n\n  const quizQuestions = getQuizQuestions();\n  const quizTitle = chapter.quiz?.title || `${chapter.title} Quiz`;\n  const quizDescription = chapter.quiz?.description || 'Test your knowledge of this chapter\\'s content.';\n\n  useEffect(() => {\n    // Load bookmarks from localStorage\n    const savedBookmarks = localStorage.getItem(`bookmarks-${moduleId}-${chapter.id}`);\n    if (savedBookmarks) {\n      setBookmarked(JSON.parse(savedBookmarks));\n    }\n    \n    // Load progress from localStorage\n    const savedProgress = localStorage.getItem(`progress-${moduleId}-${chapter.id}`);\n    if (savedProgress) {\n      setSectionProgress(JSON.parse(savedProgress));\n      \n      // Calculate overall progress\n      const progressObj = JSON.parse(savedProgress);\n      const completedSections = Object.values(progressObj).filter(val => val).length;\n      const totalSections = chapter.sections && Array.isArray(chapter.sections) ? chapter.sections.length : 0;\n      if (totalSections > 0) {\n        setProgress(Math.round((completedSections / totalSections) * 100));\n      }\n    }\n  }, [moduleId, chapter.id, chapter.sections]);\n\n  // Set active tab based on URL parameters\n  useEffect(() => {\n    const tabParam = searchParams.get('tab');\n    if (tabParam && (tabParam === 'content' || tabParam === 'quiz')) {\n      setActiveTab(tabParam);\n    }\n  }, [searchParams]);\n\n  const handleSectionChange = (sectionId) => {\n    setExpandedSection(expandedSection === sectionId ? null : sectionId);\n    \n    // Mark section as read when expanded\n    if (expandedSection !== sectionId && !sectionProgress[sectionId]) {\n      const updatedProgress = { ...sectionProgress, [sectionId]: true };\n      setSectionProgress(updatedProgress);\n      \n      // Save progress to localStorage\n      localStorage.setItem(`progress-${moduleId}-${chapter.id}`, JSON.stringify(updatedProgress));\n      \n      // Update overall progress\n      const completedSections = Object.values(updatedProgress).filter(val => val).length;\n      const totalSections = chapter.sections && Array.isArray(chapter.sections) ? chapter.sections.length : 0;\n      if (totalSections > 0) {\n        setProgress(Math.round((completedSections / totalSections) * 100));\n      }\n    }\n  };\n\n  const handleAnswerChange = (questionId, value) => {\n    setQuizAnswers(prev => ({\n      ...prev,\n      [questionId]: value\n    }));\n  };\n\n  const handleQuizSubmit = () => {\n    // Calculate the score\n    let correctCount = 0;\n    let totalQuestions = 0;\n    \n    if (quizQuestions.length > 0) {\n      totalQuestions = quizQuestions.length;\n      \n      quizQuestions.forEach((question, index) => {\n        const questionId = question.id || index;\n        if (quizAnswers[questionId] === question.correctAnswer) {\n          correctCount++;\n        }\n      });\n    }\n    \n    const score = totalQuestions > 0 ? (correctCount / totalQuestions) * 100 : 0;\n    const passed = score >= 70; // Pass threshold is 70%\n    \n    setQuizScore(score);\n    setQuizPassed(passed);\n    setQuizSubmitted(true);\n    \n    // Save the quiz result to localStorage\n    if (passed) {\n      markQuizCompleted(moduleId, chapter.id, score);\n    }\n    \n    // Notify the parent component\n    if (onQuizCompletion) {\n      onQuizCompletion(passed, score);\n    }\n  };\n\n  const resetQuiz = () => {\n    setQuizAnswers({});\n    setQuizSubmitted(false);\n    setQuizScore(0);\n    setQuizPassed(false);\n  };\n\n  const toggleBookmark = (sectionId) => {\n    let updatedBookmarks;\n    if (bookmarked.includes(sectionId)) {\n      updatedBookmarks = bookmarked.filter(id => id !== sectionId);\n      setSnackbarMessage('Bookmark removed');\n    } else {\n      updatedBookmarks = [...bookmarked, sectionId];\n      setSnackbarMessage('Bookmark added - you can access this later from your profile');\n    }\n    \n    setBookmarked(updatedBookmarks);\n    localStorage.setItem(`bookmarks-${moduleId}-${chapter.id}`, JSON.stringify(updatedBookmarks));\n    setSnackbarOpen(true);\n  };\n\n  const handleNextChapter = () => {\n    if (onNextChapter) {\n      onNextChapter();\n    }\n  };\n\n  if (!chapter) {\n    return <Box sx={{ p: 3 }}><Typography>Chapter not found</Typography></Box>;\n  }\n\n  // Check if sections exist and provide a fallback message if not\n  const hasNoSections = !chapter.sections || !Array.isArray(chapter.sections) || chapter.sections.length === 0;\n\n  return (\n    <Box>\n      <Box sx={{ p: 3, bgcolor: 'primary.main', color: 'white' }}>\n        <Typography variant=\"h4\" gutterBottom>{chapter.title}</Typography>\n        <Typography variant=\"subtitle1\">{chapter.description}</Typography>\n      </Box>\n      \n      <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\n        <Box sx={{ display: 'flex' }}>\n          <Button \n            onClick={() => setActiveTab('content')}\n            sx={{ \n              py: 2, \n              px: 3, \n              borderBottom: activeTab === 'content' ? '2px solid' : 'none',\n              borderColor: 'primary.main',\n              color: activeTab === 'content' ? 'primary.main' : 'text.primary',\n              borderRadius: 0,\n              fontWeight: activeTab === 'content' ? 'bold' : 'normal'\n            }}\n          >\n            Content\n          </Button>\n          {hasQuiz && (\n            <Button \n              onClick={() => setActiveTab('quiz')}\n              sx={{ \n                py: 2, \n                px: 3, \n                borderBottom: activeTab === 'quiz' ? '2px solid' : 'none',\n                borderColor: 'primary.main',\n                color: activeTab === 'quiz' ? 'primary.main' : 'text.primary',\n                borderRadius: 0,\n                fontWeight: activeTab === 'quiz' ? 'bold' : 'normal'\n              }}\n            >\n              Quiz\n            </Button>\n          )}\n        </Box>\n      </Box>\n      \n      <Box sx={{ p: 3 }}>\n        {activeTab === 'content' ? (\n          <>\n            {hasNoSections ? (\n              <Paper elevation={0} variant=\"outlined\" sx={{ p: 3, borderRadius: 2, textAlign: 'center' }}>\n                <Typography variant=\"h6\" gutterBottom>Content Coming Soon</Typography>\n                <Typography variant=\"body1\">\n                  The content for this chapter is currently being developed. \n                  Please check back later for updates.\n                </Typography>\n              </Paper>\n            ) : (\n              chapter.sections.map((section) => (\n                <Accordion \n                  key={section.id}\n                  expanded={expandedSection === section.id}\n                  onChange={() => handleSectionChange(section.id)}\n                  sx={{ \n                    mb: 2, \n                    overflow: 'hidden',\n                    bgcolor: sectionProgress[section.id] ? 'rgba(76, 175, 80, 0.04)' : 'transparent',\n                    position: 'relative'\n                  }}\n                >\n                  <AccordionSummary expandIcon={<ExpandMore />} sx={{ bgcolor: 'action.hover' }}>\n                    <Box sx={{ display: 'flex', alignItems: 'center', width: '100%', justifyContent: 'space-between' }}>\n                      <Typography sx={{ fontWeight: expandedSection === section.id ? 'bold' : 'normal' }}>\n                        {section.id} - {section.title}\n                        {sectionProgress[section.id] && (\n                          <Chip\n                            label=\"Completed\"\n                            size=\"small\"\n                            color=\"success\"\n                            sx={{ ml: 2, height: 20, fontSize: '0.6rem' }}\n                          />\n                        )}\n                      </Typography>\n                      <Button \n                        size=\"small\" \n                        onClick={(e) => {\n                          e.stopPropagation();\n                          toggleBookmark(section.id);\n                        }}\n                        startIcon={bookmarked.includes(section.id) ? <Bookmark color=\"primary\" /> : <BookmarkBorder />}\n                        sx={{ ml: 2 }}\n                      >\n                        {bookmarked.includes(section.id) ? 'Bookmarked' : 'Bookmark'}\n                      </Button>\n                    </Box>\n                  </AccordionSummary>\n                  <AccordionDetails>\n                    <Box sx={{ p: 1 }} dangerouslySetInnerHTML={{ __html: section.content }} />\n                  </AccordionDetails>\n                </Accordion>\n              ))\n            )}\n            \n            {bookmarked.length > 0 && !hasNoSections && (\n              <Box sx={{ mt: 4, mb: 4 }}>\n                <Typography variant=\"h6\" gutterBottom>\n                  Your Bookmarked Sections\n                </Typography>\n                <Paper elevation={0} variant=\"outlined\" sx={{ p: 2, borderRadius: 2 }}>\n                  <Grid container spacing={2}>\n                    {bookmarked.map(bookmarkId => {\n                      const section = chapter.sections.find(s => s.id === bookmarkId);\n                      if (!section) return null;\n                      \n                      return (\n                        <Grid item xs={12} sm={6} md={4} key={bookmarkId}>\n                          <Paper \n                            variant=\"outlined\" \n                            sx={{ \n                              p: 2, \n                              cursor: 'pointer',\n                              '&:hover': { bgcolor: 'rgba(0, 0, 0, 0.03)' }\n                            }}\n                            onClick={() => {\n                              setExpandedSection(bookmarkId);\n                              setTimeout(() => {\n                                document.getElementById(`section-${bookmarkId}`)?.scrollIntoView({ behavior: 'smooth' });\n                              }, 100);\n                            }}\n                          >\n                            <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                              <Bookmark color=\"primary\" sx={{ mr: 1, fontSize: '1rem' }} />\n                              <Typography variant=\"body2\" fontWeight=\"medium\">\n                                {section.title}\n                              </Typography>\n                            </Box>\n                          </Paper>\n                        </Grid>\n                      );\n                    })}\n                  </Grid>\n                </Paper>\n              </Box>\n            )}\n            \n            {chapter.examples && chapter.examples.length > 0 && (\n              <>\n                <Typography variant=\"h5\" gutterBottom sx={{ mt: 4, mb: 2 }}>\n                  Code Examples\n                </Typography>\n                \n                <Grid container spacing={3}>\n                  {chapter.examples.map((example) => (\n                    <Grid item xs={12} md={6} key={example.id}>\n                      <Paper elevation={2} sx={{ borderRadius: 2, overflow: 'hidden' }}>\n                        <Box sx={{ bgcolor: 'primary.main', color: 'primary.contrastText', p: 2, display: 'flex', alignItems: 'center' }}>\n                          <Code sx={{ mr: 1 }} />\n                          <Typography variant=\"h6\">{example.title}</Typography>\n                        </Box>\n                        <Box sx={{ p: 2 }}>\n                          <Typography variant=\"body2\" paragraph>{example.description}</Typography>\n                          <Paper variant=\"outlined\" sx={{ \n                            p: 2, \n                            bgcolor: '#272822', \n                            color: '#f8f8f2', \n                            fontFamily: 'monospace',\n                            whiteSpace: 'pre-wrap',\n                            overflowX: 'auto',\n                            fontSize: '0.875rem'\n                          }}>\n                            {example.code}\n                          </Paper>\n                          <Typography variant=\"subtitle2\" sx={{ mt: 2, fontWeight: 'bold' }}>Explanation:</Typography>\n                          <Typography variant=\"body2\">{example.explanation}</Typography>\n                        </Box>\n                      </Paper>\n                    </Grid>\n                  ))}\n                </Grid>\n              </>\n            )}\n            \n            {chapter.videos && chapter.videos.length > 0 && (\n              <>\n                <Typography variant=\"h5\" gutterBottom sx={{ mt: 4, mb: 2 }}>\n                  Video Resources\n                </Typography>\n                \n                <Grid container spacing={3}>\n                  {chapter.videos.map((video) => (\n                    <Grid item xs={12} sm={6} md={4} key={video.id}>\n                      <Card sx={{ height: '100%', display: 'flex', flexDirection: 'column' }}>\n                        <CardActionArea component=\"a\" href={video.url} target=\"_blank\" rel=\"noopener noreferrer\">\n                          <Box sx={{ position: 'relative' }}>\n                            <CardMedia\n                              component=\"img\"\n                              height=\"140\"\n                              image={video.thumbnail}\n                              alt={video.title}\n                            />\n                            <Box sx={{ \n                              position: 'absolute', \n                              top: 0, \n                              left: 0, \n                              width: '100%', \n                              height: '100%', \n                              display: 'flex', \n                              alignItems: 'center', \n                              justifyContent: 'center',\n                              background: 'rgba(0,0,0,0.3)',\n                              transition: 'background 0.3s',\n                              '&:hover': { background: 'rgba(0,0,0,0.5)' }\n                            }}>\n                              <PlayArrow sx={{ fontSize: 60, color: 'white' }} />\n                            </Box>\n                          </Box>\n                        </CardActionArea>\n                      </Card>\n                    </Grid>\n                  ))}\n                </Grid>\n              </>\n            )}\n          </>\n        ) : (\n          <>\n            <Typography variant=\"h5\" gutterBottom sx={{ mb: 2 }}>\n              Chapter Quiz\n            </Typography>\n            \n            <Paper sx={{ p: 3, borderRadius: 2 }}>\n              <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\n                <Quiz sx={{ mr: 1, color: 'primary.main' }} />\n                <Typography variant=\"h6\">{quizTitle}</Typography>\n              </Box>\n              \n              <Typography variant=\"body2\" paragraph>\n                {quizDescription}\n              </Typography>\n              \n              {quizSubmitted && quizScore && (\n                <Alert \n                  severity={quizPassed ? \"success\" : \"warning\"} \n                  sx={{ mb: 3 }}\n                >\n                  <Typography variant=\"subtitle2\">\n                    {quizPassed \n                      ? \"Congratulations! You passed the quiz.\" \n                      : \"You need to review this chapter again.\"}\n                  </Typography>\n                  <Typography variant=\"body2\">\n                    Your score: {quizScore.toFixed(1)}%\n                  </Typography>\n                </Alert>\n              )}\n              \n              {quizQuestions.map((question, index) => {\n                const questionId = question.id || index;\n                return (\n                  <Box key={questionId} sx={{ mb: 3, pb: 3, borderBottom: index < quizQuestions.length - 1 ? '1px solid #e0e0e0' : 'none' }}>\n                    <Typography variant=\"subtitle1\" gutterBottom>\n                      {index + 1}. {question.question}\n                    </Typography>\n                    \n                    <FormControl component=\"fieldset\" sx={{ ml: 2 }}>\n                      <RadioGroup\n                        value={quizAnswers[questionId] || ''}\n                        onChange={(e) => handleAnswerChange(questionId, Number(e.target.value))}\n                      >\n                        {question.options.map((option, optIndex) => {\n                          // Handle both array of strings and array of objects\n                          const optionId = typeof option === 'object' ? option.id : optIndex;\n                          const optionText = typeof option === 'object' ? option.text : option;\n                          \n                          return (\n                            <FormControlLabel\n                              key={optionId}\n                              value={optionId}\n                              control={<Radio />}\n                              label={optionText}\n                              disabled={quizSubmitted}\n                              sx={{\n                                ...(quizSubmitted && optionId === question.correctAnswer && {\n                                  color: 'success.main',\n                                  fontWeight: 'bold'\n                                }),\n                                ...(quizSubmitted && quizAnswers[questionId] === optionId && quizAnswers[questionId] !== question.correctAnswer && {\n                                  color: 'error.main'\n                                })\n                              }}\n                            />\n                          );\n                        })}\n                      </RadioGroup>\n                    </FormControl>\n                    \n                    {quizSubmitted && (\n                      <Box sx={{ mt: 1, ml: 2 }}>\n                        {quizAnswers[questionId] === question.correctAnswer ? (\n                          <Typography variant=\"body2\" sx={{ color: 'success.main', display: 'flex', alignItems: 'center' }}>\n                            <Check fontSize=\"small\" sx={{ mr: 0.5 }} />\n                            Correct!\n                          </Typography>\n                        ) : (\n                          <Typography variant=\"body2\" sx={{ color: 'error.main' }}>\n                            Incorrect. The correct answer is: {\n                              typeof question.options[question.correctAnswer] === 'object' \n                                ? question.options[question.correctAnswer]?.text \n                                : question.options[question.correctAnswer]\n                            }\n                          </Typography>\n                        )}\n                        \n                        <Typography variant=\"body2\" sx={{ mt: 1, fontStyle: 'italic' }}>\n                          {question.explanation}\n                        </Typography>\n                      </Box>\n                    )}\n                  </Box>\n                );\n              })}\n              \n              <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 3 }}>\n                {quizSubmitted ? (\n                  <Button \n                    variant=\"outlined\" \n                    onClick={resetQuiz} \n                    startIcon={<Assignment />}\n                  >\n                    Retake Quiz\n                  </Button>\n                ) : (\n                  <Button \n                    variant=\"contained\" \n                    onClick={handleQuizSubmit} \n                    startIcon={<Check />}\n                    disabled={Object.keys(quizAnswers).length !== quizQuestions.length}\n                  >\n                    Submit Answers\n                  </Button>\n                )}\n                \n                <Button \n                  variant=\"outlined\" \n                  onClick={handleNextChapter} \n                  endIcon={<ArrowForward />}\n                >\n                  Next Chapter\n                </Button>\n              </Box>\n            </Paper>\n          </>\n        )}\n      </Box>\n      \n      <Snackbar\n        open={snackbarOpen}\n        autoHideDuration={3000}\n        onClose={() => setSnackbarOpen(false)}\n        message={snackbarMessage}\n      />\n    </Box>\n  );\n};\n\nexport default ChapterContent; ","import React, { useState, useEffect, useContext, useRef } from 'react';\nimport { useParams, Link, useNavigate } from 'react-router-dom';\nimport axios from \"axios\";\nimport { \n  Box, Typography, Button, Breadcrumbs, Paper, CircularProgress,\n  Divider, IconButton, Drawer, List, ListItem, ListItemText,\n  Snackbar, Alert, Chip, TextField, InputAdornment\n} from '@mui/material';\nimport { \n  ArrowBack, MenuBook, Menu, NavigateBefore, NavigateNext,\n  BookmarkBorder, Bookmark, CheckCircle, Save, Edit, Cancel,\n  Title as TitleIcon, Code as CodeIcon\n} from '@mui/icons-material';\n\n// Import the module data and the ChapterContent component\nimport { getModuleById } from '../data/modules';\nimport ChapterContent from '../components/ChapterContent';\nimport { getChapterProgress, updateChapterProgress } from '../utils/progressTracker';\nimport URLSITE from '../constant';\nimport hljs from 'highlight.js';\nimport 'highlight.js/styles/googlecode.css';\nimport SEO from \"./SEO\"\n// Import Verilog highlighting - make sure you have this installed\nimport 'highlight.js/lib/languages/verilog';\nimport AuthContext from '../context/AuthContext';\n\n// Register Verilog language with highlight.js if available\ntry {\n  const verilogLang = require('highlight.js/lib/languages/verilog');\n  hljs.registerLanguage('verilog', verilogLang);\n} catch (error) {\n  console.warn('Verilog highlighting not available:', error);\n}\n\nconst ChapterView = () => {\n  const { moduleId, chapterId } = useParams();\n  const navigate = useNavigate();\n  const [module, setModule] = useState(null);\n  const [chapter, setChapter] = useState(null);\n  const [chapterContent, setChapterContent] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [drawerOpen, setDrawerOpen] = useState(false);\n  const [isChapterBookmarked, setIsChapterBookmarked] = useState(false);\n  const [isChapterCompleted, setIsChapterCompleted] = useState(false);\n  const [snackbarOpen, setSnackbarOpen] = useState(false);\n  const [snackbarMessage, setSnackbarMessage] = useState('');\n  const [snackbarSeverity, setSnackbarSeverity] = useState('success');\n  const [error, setError] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [progress, setProgress] = useState(null);\n  const context = useContext(AuthContext);\n  \n  // New state for handling editable sections\n  const [isEditing, setIsEditing] = useState(false);\n  const [saveLoading, setSaveLoading] = useState(false);\n  const sectionRefs = useRef({});\n  const sectionTitleRefs = useRef({});\n  const codeExampleRefs = useRef({});\n  \n  // State for edited content\n  const [editedSections, setEditedSections] = useState([]);\n  const [editedCodeExamples, setEditedCodeExamples] = useState([]);\n  const [editedChapterTitle, setEditedChapterTitle] = useState(\"\");\n  const [editedChapterDescription, setEditedChapterDescription] = useState(\"\");\n\n  // Clear refs when toggling edit mode or when chapter changes\n  useEffect(() => {\n    sectionRefs.current = {};\n    sectionTitleRefs.current = {};\n    codeExampleRefs.current = {};\n  }, [isEditing, chapterId]);\n\n  const navigateToNextChapter = () => {\n    if (!context?.currentModule?.chapters) return;\n    \n    let nextIndex = context.currentChapterIndex + 1;\n    if (context.currentModule.chapters.length > nextIndex) {\n      context.setCurrentChapterIndex?.(nextIndex);\n      navigate(`/modules/${moduleId}/chapters/${context.currentModule.chapters[nextIndex].chapterId}`);\n    }\n  };\n\n  const navigateToPrevChapter = () => {\n    if (!context?.currentModule?.chapters) return;\n    \n    let prevIndex = context.currentChapterIndex - 1;\n    if (prevIndex >= 0) {\n      context.setCurrentChapterIndex?.(prevIndex);\n      navigate(`/modules/${moduleId}/chapters/${context.currentModule.chapters[prevIndex].chapterId}`);\n    }\n  };\n\n  // Check user access to paid modules\n  useEffect(() => {\n    if (!moduleId || !module || !module.moduleType) return;\n    if (!context?.user) {\n      setIsAuthenticated(false);\n      return;\n    }\n    \n    setIsAuthenticated(true);\n    \n    const checkModuleAccess = async () => {\n      if (!moduleId || !module) return;\n      \n      try {\n        const response = await axios.post(`${URLSITE}/api/general/user-by-email`, { \n          email: context.user.wholeData?.email \n        });\n        \n        if (response.status === 200) {\n          // If module is not free and user doesn't have access, redirect\n          if (module.moduleType !== \"free\" && \n              !response.data.paidModule?.some(mod => mod.moduleId === moduleId)) {\n            navigate(`/modules/${moduleId}`);\n          }\n        }\n      } catch (err) {\n        console.error('Error checking module access:', err);\n        // Don't redirect on error, just log it\n      }\n    };\n\n    checkModuleAccess();\n  }, [context?.user]);\n\n  // Apply syntax highlighting\n  useEffect(() => {\n    const applyHighlighting = () => {\n      setTimeout(() => {\n        document.querySelectorAll('pre code').forEach((block) => {\n          hljs.highlightBlock(block);\n        });\n      }, 0);\n    };\n    \n    if (!loading) {\n      applyHighlighting();\n    }\n  }, [loading, isEditing, chapterContent]);\n\n  // Fetch module and chapter data\n  useEffect(() => {\n    const fetchModuleAndChapter = async () => {\n      try {\n        setLoading(true);\n        \n        // Get module data\n        let moduleData = getModuleById(moduleId);\n        if (!moduleData) {\n          throw new Error(`Module with ID ${moduleId} not found`);\n        }\n        \n        setModule(moduleData);\n        \n        // Fetch chapter content from server using chapterId\n        try {\n          const response = await axios.get(`${URLSITE}/api/general/chapter/${chapterId}`);\n          const data = response.data;\n          \n          setChapterContent(data);\n          setEditedChapterTitle(data.title || \"\");\n          setEditedChapterDescription(data.description || \"\");\n          \n          // Set chapter basic info\n          setChapter({\n            id: data.id,\n            title: data.title,\n            moduleId: data.moduleId\n          });\n        } catch (err) {\n          console.error('Error fetching chapter content:', err);\n          setError(err.message);\n          \n          // Fallback to module data if API fetch fails\n          if (moduleData?.chapters) {\n            const chapterIdNum = parseInt(chapterId, 10);\n            const fallbackChapter = moduleData.chapters.find(c => c.id === chapterIdNum);\n            \n            if (fallbackChapter) {\n              setChapter(fallbackChapter);\n              // Create minimal chapter content structure\n              setChapterContent({\n                id: fallbackChapter.id,\n                title: fallbackChapter.title,\n                description: fallbackChapter.description || \"\",\n                sections: fallbackChapter.sections || [],\n                codeExamples: fallbackChapter.codeExamples || []\n              });\n            } else {\n              throw new Error(`Chapter with ID ${chapterId} not found`);\n            }\n          }\n        }\n        \n        // Get progress data if authenticated\n        if (isAuthenticated) {\n          try {\n            const progressResponse = await axios.get(`${URLSITE}/api/user/progress/${moduleId}`);\n            if (progressResponse.status === 200) {\n              setProgress(progressResponse.data);\n            }\n          } catch (progressErr) {\n            console.error('Error fetching progress:', progressErr);\n            // Continue without progress data\n          }\n        }\n        \n        // Check if this chapter is bookmarked\n        if (chapterId) {\n          const bookmarkedChapters = JSON.parse(localStorage.getItem('bookmarkedChapters') || '[]');\n          const isBookmarked = bookmarkedChapters.some(\n            bookmark => bookmark.moduleId === moduleId && bookmark.chapterId === chapterId\n          );\n          setIsChapterBookmarked(isBookmarked);\n          \n          // Check if chapter is completed\n          const chapterIdNum = parseInt(chapterId, 10);\n          const isCompleted = getChapterProgress(moduleId, chapterIdNum);\n          setIsChapterCompleted(isCompleted);\n        }\n      } catch (error) {\n        console.error('Error fetching data:', error);\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchModuleAndChapter();\n  }, [moduleId, chapterId, isAuthenticated]);\n\n  const toggleDrawer = () => {\n    setDrawerOpen(!drawerOpen);\n  };\n\n  // Handle chapter completion\n  const markChapterCompleted = () => {\n    if (!module || !chapter) return;\n    \n    const chapterIdNum = parseInt(chapterId, 10);\n    updateChapterProgress(moduleId, chapterIdNum, true);\n    setIsChapterCompleted(true);\n    showSnackbar('Chapter marked as completed!', 'success');\n  };\n\n  // Handle chapter bookmarking\n  const toggleChapterBookmark = () => {\n    if (!module || !chapter) return;\n    \n    const bookmarkedChapters = JSON.parse(localStorage.getItem('bookmarkedChapters') || '[]');\n    const bookmarkData = {\n      moduleId,\n      chapterId: chapterId.toString(),\n      moduleTitle: module.title,\n      chapterTitle: chapter.title,\n      timestamp: new Date().toISOString()\n    };\n    \n    if (isChapterBookmarked) {\n      // Remove bookmark\n      const updatedBookmarks = bookmarkedChapters.filter(\n        bookmark => !(bookmark.moduleId === moduleId && bookmark.chapterId === chapterId.toString())\n      );\n      localStorage.setItem('bookmarkedChapters', JSON.stringify(updatedBookmarks));\n      setIsChapterBookmarked(false);\n      showSnackbar('Chapter bookmark removed', 'info');\n    } else {\n      // Add bookmark\n      bookmarkedChapters.push(bookmarkData);\n      localStorage.setItem('bookmarkedChapters', JSON.stringify(bookmarkedChapters));\n      setIsChapterBookmarked(true);\n      showSnackbar('Chapter bookmarked successfully! Access it anytime from your profile.', 'success');\n    }\n  };\n  \n  // Show snackbar message\n  const showSnackbar = (message, severity = 'success') => {\n    setSnackbarMessage(message);\n    setSnackbarSeverity(severity);\n    setSnackbarOpen(true);\n  };\n  \n  // Handle quiz completion from ChapterContent\n  const handleQuizCompletion = (passed) => {\n    if (passed) {\n      setIsChapterCompleted(true);\n      showSnackbar('Congratulations! You passed the quiz and completed this chapter.', 'success');\n    } else {\n      showSnackbar('You need to score at least 70% to complete this chapter.', 'warning');\n    }\n  };\n\n  // Handle enabling editing mode\n  const handleEnableEditing = () => {\n    if (!chapterContent) return;\n    \n    setIsEditing(true);\n    \n    // Initialize with current values\n    setEditedChapterTitle(chapterContent.title || \"\");\n    setEditedChapterDescription(chapterContent.description || \"\");\n    \n    if (chapterContent.sections) {\n      setEditedSections([...chapterContent.sections]);\n    } else {\n      setEditedSections([]);\n    }\n    \n    if (chapterContent.codeExamples) {\n      setEditedCodeExamples([...chapterContent.codeExamples]);\n    } else {\n      setEditedCodeExamples([]);\n    }\n  };\n\n  // Handle section title change\n  const handleSectionTitleChange = (sectionId, newTitle) => {\n    setEditedSections(prevSections => \n      prevSections.map(section => \n        section.id === sectionId ? { ...section, title: newTitle } : section\n      )\n    );\n  };\n\n  // Handle code example changes\n  const handleCodeExampleChange = (exampleId, field, value) => {\n    setEditedCodeExamples(prevExamples => \n      prevExamples.map(example => \n        example.id === exampleId ? { ...example, [field]: value } : example\n      )\n    );\n  };\n\n  // Handle cancelling editing mode\n  const handleCancelEditing = () => {\n    setIsEditing(false);\n    setEditedSections([]);\n    setEditedCodeExamples([]);\n    setEditedChapterTitle(\"\");\n    setEditedChapterDescription(\"\");\n  };\n\n  // Handle section content change - improved version\n  const handleSectionContentChange = (sectionId) => {\n    if (!sectionRefs.current[sectionId]) return;\n    \n    const updatedContent = sectionRefs.current[sectionId].innerHTML;\n    \n    // Find the section to update\n    setEditedSections(prevSections => \n      prevSections.map(section => \n        section.id === sectionId ? { ...section, content: updatedContent } : section\n      )\n    );\n  };\n\n  // Set up event listeners for all editable sections\n  useEffect(() => {\n    if (!isEditing || !chapterContent?.sections) return;\n    \n    // Create event listeners for all sections\n    const listeners = {};\n    \n    chapterContent.sections.forEach(section => {\n      const sectionId = section.id;\n      if (sectionRefs.current[sectionId]) {\n        const handleInput = () => handleSectionContentChange(sectionId);\n        sectionRefs.current[sectionId].addEventListener('input', handleInput);\n        listeners[sectionId] = handleInput;\n      }\n    });\n    \n    // Clean up listeners when component unmounts or editing state changes\n    return () => {\n      Object.entries(listeners).forEach(([sectionId, listener]) => {\n        if (sectionRefs.current[sectionId]) {\n          sectionRefs.current[sectionId].removeEventListener('input', listener);\n        }\n      });\n    };\n  }, [isEditing, chapterContent?.sections]);\n\n  // Improved handle save changes function\n  const handleSaveChanges = async () => {\n    if (!chapterContent) return;\n    \n    setSaveLoading(true);\n    \n    try {\n      // First, get the latest content from all section refs\n      const sectionsToUpdate = chapterContent.sections?.map(section => {\n        const sectionElement = sectionRefs.current[section.id];\n        const updatedContent = sectionElement ? sectionElement.innerHTML : section.content || \"\";\n        \n        // Look for any edited section title in the edited sections state\n        const editedSection = editedSections.find(s => s.id === section.id);\n        const updatedTitle = editedSection?.title || section.title || \"\";\n        \n        return {\n          ...section,\n          title: updatedTitle,\n          content: updatedContent\n        };\n      }) || [];\n      \n      // Get updated code examples\n      const codeExamplesToUpdate = chapterContent.codeExamples?.map(example => {\n        const codeElement = codeExampleRefs.current[`${example.id}-code`];\n        const updatedCode = codeElement ? codeElement.textContent : example.code || \"\";\n        \n        // Find any edited fields from the state\n        const editedExample = editedCodeExamples.find(e => e.id === example.id);\n        \n        return {\n          ...example,\n          title: editedExample?.title || example.title || \"\",\n          description: editedExample?.description || example.description || \"\",\n          explanation: editedExample?.explanation || example.explanation || \"\",\n          code: updatedCode,\n          language: editedExample?.language || example.language || \"\"\n        };\n      }) || [];\n      \n      // Create the updated chapter content object\n      const updatedChapterContent = {\n        ...chapterContent,\n        title: editedChapterTitle,\n        description: editedChapterDescription,\n        sections: sectionsToUpdate,\n        codeExamples: codeExamplesToUpdate\n      };\n      \n      // Debug log to see what we're sending\n      console.log(\"Saving updated content:\", updatedChapterContent);\n      \n      // Send update request to the server\n      const response = await axios.post(\n        `${URLSITE}/api/general/update-chapter`,\n        updatedChapterContent,\n        {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        }\n      );\n      \n      if (response.status === 200) {\n        // Update local state with the new content\n        setChapterContent(updatedChapterContent);\n        setIsEditing(false);\n        showSnackbar('Chapter content updated successfully!', 'success');\n      } else {\n        throw new Error('Failed to update chapter content');\n      }\n    } catch (error) {\n      console.error('Error saving chapter content:', error);\n      showSnackbar('Failed to save changes. Please try again.', 'error');\n    } finally {\n      setSaveLoading(false);\n    }\n  };\n  \n  // Render loading state\n  if (loading) {\n    return (\n      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '80vh' }}>\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  // Render error state if module or chapter not found\n  if (error || !module || !chapter) {\n    return (\n      <Box className=\"container page-container\" sx={{ textAlign: 'center', py: 8 }}>\n        <Typography variant=\"h5\">\n          {error || \"Content not found\"}\n        </Typography>\n        <Button component={Link} to=\"/modules\" sx={{ mt: 2 }}>\n          Back to Modules\n        </Button>\n      </Box>\n    );\n  }\n\n  // Calculate chapter navigation info\n  const currentIndex = module.chapters ? \n    module.chapters.findIndex(ch => ch.id === parseInt(chapterId, 10)) : -1;\n  const isFirstChapter = currentIndex === 0;\n  const isLastChapter = currentIndex === (module.chapters?.length - 1) || currentIndex === -1;\n  const prevChapter = !isFirstChapter && currentIndex !== -1 ? module.chapters[currentIndex - 1] : null;\n  const nextChapter = !isLastChapter && currentIndex !== -1 ? module.chapters[currentIndex + 1] : null;\n\n  // Check if user has admin rights\n  const isAdmin = context?.user?.email === 'verigeektech@gmail.com';\n\n  return (\n    <>\n    {\n      chapter && editedChapterDescription && <SEO \n      title={chapter?.title} description={editedChapterDescription || \"\"} \n      url={\"verigeek.xyz\"}\n      />\n    }\n      {/* Drawer for chapter navigation */}\n      <Drawer\n        anchor=\"left\"\n        open={drawerOpen}\n        onClose={toggleDrawer}\n      >\n        <Box sx={{ width: 300, p: 2 }}>\n          <Typography variant=\"h6\" sx={{ mb: 2 }}>\n            {context?.currentModule?.title || module.title}\n          </Typography>\n          <Divider sx={{ mb: 2 }} />\n          <List>\n            {module.chapters?.map(ch => {\n              const isCurrentChapter = ch.id === parseInt(chapterId, 10);\n              const isCompleted = getChapterProgress(moduleId, ch.id);\n              \n              return (\n                <ListItem \n                  key={ch.id}\n                  button \n                  component={Link}\n                  to={`/modules/${moduleId}/chapters/${ch.id}`}\n                  selected={isCurrentChapter}\n                  sx={{ \n                    borderRadius: 1,\n                    mb: 0.5,\n                    '&.Mui-selected': {\n                      bgcolor: 'primary.light',\n                      color: 'primary.contrastText',\n                    }\n                  }}\n                >\n                  {isCompleted && (\n                    <CheckCircle \n                      sx={{ \n                        mr: 1, \n                        fontSize: '1rem',\n                        color: 'success.main'\n                      }} \n                    />\n                  )}\n                  <ListItemText \n                    primary={`${ch.id}. ${ch.title}`} \n                    primaryTypographyProps={{\n                      fontWeight: isCurrentChapter ? 'bold' : 'normal',\n                      fontSize: '0.9rem'\n                    }}\n                  />\n                </ListItem>\n              );\n            })}\n          </List>\n        </Box>\n      </Drawer>\n\n      <Box className=\"container page-container\">\n        {/* Header with navigation */}\n        <Box sx={{ mb: 3, display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n          <Box sx={{ display: 'flex', alignItems: 'center' }}>\n            <IconButton onClick={toggleDrawer} sx={{ mr: 1 }}>\n              <Menu />\n            </IconButton>\n            <Breadcrumbs>\n              <Link to=\"/\" style={{ textDecoration: 'none', color: 'inherit' }}>\n                Home\n              </Link>\n              <Link to=\"/modules\" style={{ textDecoration: 'none', color: 'inherit' }}>\n                Modules\n              </Link>\n              <Link to={`/modules/${moduleId}`} style={{ textDecoration: 'none', color: 'inherit' }}>\n                {context?.currentModule?.title}\n              </Link>\n              <Typography color=\"text.primary\">\n                Chapter {chapter?.title}\n              </Typography>\n            </Breadcrumbs>\n          </Box>\n          <Button \n            component={Link} \n            to={`/modules/${moduleId}`}\n            startIcon={<ArrowBack />}\n          >\n            Back to Module\n          </Button>\n        </Box>\n\n        {/* Chapter progress indicator */}\n        <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 3 }}>\n          <Box sx={{ display: 'flex', alignItems: 'center' }}>\n            <MenuBook sx={{ mr: 1, color: 'primary.main' }} />\n            <Typography variant=\"subtitle1\">\n              Chapter {chapter?.title}\n              {isChapterCompleted && !isEditing && (\n                <Chip \n                  size=\"small\" \n                  icon={<CheckCircle />} \n                  label=\"Completed\" \n                  color=\"success\" \n                  sx={{ ml: 2 }}\n                />\n              )}\n            </Typography>\n          </Box>\n          <Box sx={{ display: 'flex', gap: 1 }}>\n            {/* Admin editing buttons */}\n            {isAdmin && !isEditing && (\n              <Button\n                variant=\"outlined\"\n                size=\"small\"\n                startIcon={<Edit />}\n                onClick={handleEnableEditing}\n              >\n                Edit Content\n              </Button>\n            )}\n            \n            {isEditing && (\n              <>\n                <Button\n                  variant=\"outlined\"\n                  size=\"small\"\n                  color=\"error\"\n                  startIcon={<Cancel />}\n                  onClick={handleCancelEditing}\n                >\n                  Cancel Editing\n                </Button>\n                <Button\n                  variant=\"contained\"\n                  size=\"small\"\n                  color=\"primary\"\n                  startIcon={<Save />}\n                  onClick={handleSaveChanges}\n                  disabled={saveLoading}\n                >\n                  {saveLoading ? 'Saving...' : 'Save Changes'}\n                </Button>\n              </>\n            )}\n            \n            {!isEditing && (\n              <>\n                {!isChapterCompleted && (\n                  <Button\n                    variant=\"outlined\"\n                    size=\"small\"\n                    startIcon={<CheckCircle />}\n                    onClick={markChapterCompleted}\n                  >\n                    Mark as Completed\n                  </Button>\n                )}\n                <Button\n                  variant=\"outlined\"\n                  size=\"small\"\n                  startIcon={isChapterBookmarked ? <Bookmark /> : <BookmarkBorder />}\n                  onClick={toggleChapterBookmark}\n                >\n                  {isChapterBookmarked ? 'Bookmarked' : 'Bookmark'}\n                </Button>\n              </>\n            )}\n          </Box>\n        </Box>\n\n        {/* Main content */}\n        <Paper elevation={0} sx={{ borderRadius: 2, overflow: 'hidden', mb: 4 }}>\n          {/* Chapter title */}\n          <Box sx={{ p: 4, pb: 2 }}>\n            {isEditing ? (\n              <>\n                <TextField\n                  fullWidth\n                  label=\"Chapter Title\"\n                  variant=\"outlined\"\n                  value={editedChapterTitle}\n                  onChange={(e) => setEditedChapterTitle(e.target.value)}\n                  sx={{ mb: 2 }}\n                  InputProps={{\n                    startAdornment: (\n                      <InputAdornment position=\"start\">\n                        <TitleIcon />\n                      </InputAdornment>\n                    ),\n                  }}\n                />\n                <TextField\n                  fullWidth\n                  label=\"Chapter Description\"\n                  variant=\"outlined\"\n                  value={editedChapterDescription}\n                  onChange={(e) => setEditedChapterDescription(e.target.value)}\n                  multiline\n                  rows={2}\n                  sx={{ mb: 2 }}\n                />\n              </>\n            ) : (\n              <>\n                <Typography variant=\"h4\" gutterBottom>\n                  {chapterContent?.title || chapter.title || \"\"}\n                </Typography>\n                <Typography variant=\"subtitle1\" color=\"text.secondary\" gutterBottom>\n                  {chapterContent?.description || \"\"}\n                </Typography>\n              </>\n            )}\n            \n            {chapterContent?.estimatedTime && (\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Estimated time: {chapterContent.estimatedTime}\n              </Typography>\n            )}\n          </Box>\n          \n          {/* Display each section content */}\n          {chapterContent?.sections?.map((section) => (\n            <Box key={section.id} sx={{ p: 4 }}>\n              {isEditing ? (\n                <TextField\n                  fullWidth\n                  label=\"Section Title\"\n                  variant=\"outlined\"\n                  defaultValue={section.title || \"\"}\n                  onChange={(e) => handleSectionTitleChange(section.id, e.target.value)}\n                  inputRef={el => sectionTitleRefs.current[section.id] = el}\n                  sx={{ mb: 2 }}\n                />\n              ) : (\n                <Typography variant=\"h5\" gutterBottom sx={{ mt: 2 }}>\n                  {section.title || \"Untitled Section\"}\n                </Typography>\n              )}\n              \n              <div\n                contentEditable={isEditing}\n                className={`prose prose-sm max-w-none bg-white p-4 border ${isEditing ? 'border-blue-500' : 'border-gray-200'} rounded text-[1.2rem]`}\n                dangerouslySetInnerHTML={{ __html: section.content || \"\" }}\n                ref={el => sectionRefs.current[section.id] = el}\n                suppressContentEditableWarning={true}\n                onBlur={() => isEditing && handleSectionContentChange(section.id)}\n              />\n            </Box>\n          ))}\n          \n          {/* Code examples section */}\n          {chapterContent?.codeExamples?.length > 0 && (\n            <Box sx={{ p: 4 }}>\n              <Typography variant=\"h5\" gutterBottom sx={{ mt: 2 }}>\n                Code Examples\n              </Typography>\n              {chapterContent.codeExamples.map((example) => (\n                <Box key={example.id} sx={{ mb: 4 }}>\n                  {isEditing ? (\n                    <>\n                      <TextField\n                        fullWidth\n                        label=\"Example Title\"\n                        variant=\"outlined\"\n                        defaultValue={example.title || \"\"}\n                        onChange={(e) => handleCodeExampleChange(example.id, 'title', e.target.value)}\n                        sx={{ mb: 2 }}\n                      />\n                      <TextField\n                        fullWidth\n                        label=\"Example Description\"\n                        variant=\"outlined\"\n                        defaultValue={example.description || \"\"}\n                        onChange={(e) => handleCodeExampleChange(example.id, 'description', e.target.value)}\n                        multiline\n                        rows={2}\n                        sx={{ mb: 2 }}\n                      />\n                    </>\n                  ) : (\n                    <>\n                      <Typography variant=\"h6\" gutterBottom>\n                        {example.title || \"Untitled Example\"}\n                      </Typography>\n                      <Typography variant=\"body2\" gutterBottom>\n                        {example.description || \"\"}\n                      </Typography>\n                    </>\n                  )}\n                  \n                  <pre className={`bg-gray-100 p-4 rounded overflow-auto ${isEditing ? 'border-2 border-blue-500' : ''}`}>\n                    <code\n                      className={example.language || \"\"}\n                      contentEditable={isEditing}\n                      suppressContentEditableWarning={true}\n                      ref={el => codeExampleRefs.current[`${example.id}-code`] = el}\n                    >{example.code || \"\"}</code>\n                  </pre>\n                  \n                  {example.explanation && (\n                    isEditing ? (\n                      <TextField\n                        fullWidth\n                        label=\"Example Explanation\"\n                        variant=\"outlined\"\n                        defaultValue={example.explanation}\n                        onChange={(e) => handleCodeExampleChange(example.id, 'explanation', e.target.value)}\n                        multiline\n                        rows={3}\n                        sx={{ mt: 2 }}\n                      />\n                    ) : (\n                      <Typography variant=\"body2\" sx={{ mt: 2 }}>\n                        {example.explanation}\n                      </Typography>\n                    )\n                  )}\n                </Box>\n              ))}\n            </Box>\n          )}\n          \n          {/* If no content is available, use the ChapterContent component as fallback */}\n          {(!chapterContent || (!chapterContent.sections?.length && !chapterContent.codeExamples?.length)) && (\n            <ChapterContent \n              chapter={chapter} \n              moduleId={moduleId} \n              onQuizCompletion={handleQuizCompletion}\n              onNextChapter={navigateToNextChapter}\n            />\n          )}\n        </Paper>\n        \n        {/* Floating Save Button when editing */}\n        {isEditing && (\n          <Box\n          sx={{\n            position: 'fixed',\n            bottom: 30,\n            right: 30,\n            zIndex: 1000,\n            display: 'flex',\n            gap: 2\n          }}\n        >\n          <Button\n            variant=\"contained\"\n            color=\"error\"\n            startIcon={<Cancel />}\n            onClick={handleCancelEditing}\n          >\n            Cancel\n          </Button>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            startIcon={<Save />}\n            onClick={handleSaveChanges}\n            disabled={saveLoading}\n          >\n            {saveLoading ? 'Saving...' : 'Save Changes'}\n          </Button>\n        </Box>)}\n\n\n        {/* Navigation buttons */}\n<Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 4 }}>\n  <Button \n    variant=\"outlined\"\n    startIcon={<NavigateBefore />}\n    // disabled={isFirstChapter}\n    // component={Link}\n    // to={prevChapter ? `/modules/${moduleId}/chapters/${prevChapter.id}` : '#'}\n    onClick={navigateToPrevChapter}\n  >\n    Previous Chapter\n  </Button>\n  <Button \n    variant=\"contained\"\n    endIcon={<NavigateNext />}\n    // disabled={isLastChapter}\n    // component={Link}\n    // to={nextChapter ? `/modules/${moduleId}/chapters/${nextChapter.id}` : '#'}\n    onClick={navigateToNextChapter}\n  >\n    Next Chapter\n  </Button>\n</Box>\n\n{/* Snackbar for notifications */}\n<Snackbar\n  open={snackbarOpen}\n  autoHideDuration={6000}\n  onClose={() => setSnackbarOpen(false)}\n>\n  <Alert \n    onClose={() => setSnackbarOpen(false)} \n    severity={snackbarSeverity}\n  >\n    {snackbarMessage}\n  </Alert>\n</Snackbar>\n</Box>\n</>\n);\n};\n\nexport default ChapterView;"],"names":["updateChapterProgress","moduleId","chapterId","isCompleted","chapterKey","localStorage","setItem","toString","updateModuleProgress","error","console","allChapterKeys","Object","keys","filter","key","startsWith","length","completedChapters","getItem","percentage","Math","round","getChapterProgress","_ref","_chapter$quiz","_chapter$quiz2","chapter","onQuizCompletion","onNextChapter","searchParams","useSearchParams","expandedSection","setExpandedSection","useState","quizAnswers","setQuizAnswers","quizSubmitted","setQuizSubmitted","bookmarked","setBookmarked","progress","setProgress","sectionProgress","setSectionProgress","snackbarOpen","setSnackbarOpen","snackbarMessage","setSnackbarMessage","activeTab","setActiveTab","quizScore","setQuizScore","quizPassed","setQuizPassed","hasQuiz","Boolean","quiz","questions","quizQuestions","quizTitle","title","quizDescription","description","useEffect","savedBookmarks","id","JSON","parse","savedProgress","progressObj","completedSections","values","val","totalSections","sections","Array","isArray","tabParam","get","_jsx","Box","sx","p","children","Typography","hasNoSections","_jsxs","bgcolor","color","variant","gutterBottom","borderBottom","borderColor","display","Button","onClick","py","px","borderRadius","fontWeight","_Fragment","Paper","elevation","textAlign","map","section","Accordion","expanded","onChange","sectionId","updatedProgress","stringify","handleSectionChange","mb","overflow","position","AccordionSummary","expandIcon","ExpandMore","alignItems","width","justifyContent","Chip","label","size","ml","height","fontSize","e","stopPropagation","updatedBookmarks","includes","toggleBookmark","startIcon","Bookmark","BookmarkBorder","AccordionDetails","dangerouslySetInnerHTML","__html","content","mt","Grid","container","spacing","bookmarkId","find","s","item","xs","sm","md","cursor","setTimeout","_document$getElementB","document","getElementById","scrollIntoView","behavior","mr","examples","example","Code","paragraph","fontFamily","whiteSpace","overflowX","code","explanation","videos","video","Card","flexDirection","CardActionArea","component","href","url","target","rel","CardMedia","image","thumbnail","alt","top","left","background","transition","PlayArrow","Quiz","Alert","severity","toFixed","question","index","_question$options$que","questionId","pb","FormControl","RadioGroup","value","handleAnswerChange","prev","Number","options","option","optIndex","optionId","optionText","text","FormControlLabel","control","Radio","disabled","correctAnswer","Check","fontStyle","resetQuiz","Assignment","handleQuizSubmit","correctCount","totalQuestions","forEach","score","passed","markQuizCompleted","quizKey","handleNextChapter","endIcon","ArrowForward","Snackbar","open","autoHideDuration","onClose","message","verilogLang","require","hljs","registerLanguage","warn","ChapterView","_module$chapters","_context$user","_context$currentModul3","_module$chapters2","_context$currentModul4","_chapterContent$secti2","_chapterContent$codeE2","_chapterContent$secti3","_chapterContent$codeE3","useParams","navigate","useNavigate","module","setModule","setChapter","chapterContent","setChapterContent","loading","setLoading","drawerOpen","setDrawerOpen","isChapterBookmarked","setIsChapterBookmarked","isChapterCompleted","setIsChapterCompleted","snackbarSeverity","setSnackbarSeverity","setError","isAuthenticated","setIsAuthenticated","context","useContext","AuthContext","isEditing","setIsEditing","saveLoading","setSaveLoading","sectionRefs","useRef","sectionTitleRefs","codeExampleRefs","editedSections","setEditedSections","editedCodeExamples","setEditedCodeExamples","editedChapterTitle","setEditedChapterTitle","editedChapterDescription","setEditedChapterDescription","current","navigateToNextChapter","_context$currentModul","currentModule","chapters","nextIndex","currentChapterIndex","_context$setCurrentCh","setCurrentChapterIndex","call","moduleType","user","async","_context$user$wholeDa","response","axios","post","URLSITE","email","wholeData","_response$data$paidMo","status","data","paidModule","some","mod","err","checkModuleAccess","querySelectorAll","block","highlightBlock","moduleData","getModuleById","Error","chapterIdNum","parseInt","fallbackChapter","c","codeExamples","progressResponse","progressErr","isBookmarked","bookmark","fetchModuleAndChapter","toggleDrawer","showSnackbar","arguments","undefined","handleCodeExampleChange","exampleId","field","prevExamples","handleCancelEditing","handleSectionContentChange","updatedContent","innerHTML","prevSections","listeners","handleInput","addEventListener","entries","listener","removeEventListener","handleSaveChanges","_chapterContent$secti","_chapterContent$codeE","sectionsToUpdate","sectionElement","editedSection","updatedTitle","codeExamplesToUpdate","codeElement","updatedCode","textContent","editedExample","language","updatedChapterContent","log","headers","CircularProgress","className","Link","to","currentIndex","findIndex","ch","isFirstChapter","isLastChapter","isAdmin","SEO","Drawer","anchor","Divider","List","isCurrentChapter","ListItem","button","selected","CheckCircle","ListItemText","primary","primaryTypographyProps","IconButton","Menu","Breadcrumbs","style","textDecoration","ArrowBack","MenuBook","icon","gap","Edit","handleEnableEditing","Cancel","Save","markChapterCompleted","toggleChapterBookmark","bookmarkedChapters","bookmarkData","moduleTitle","chapterTitle","timestamp","Date","toISOString","push","TextField","fullWidth","InputProps","startAdornment","InputAdornment","TitleIcon","multiline","rows","estimatedTime","defaultValue","handleSectionTitleChange","newTitle","inputRef","el","contentEditable","ref","suppressContentEditableWarning","onBlur","ChapterContent","bottom","right","zIndex","NavigateBefore","navigateToPrevChapter","_context$currentModul2","prevIndex","_context$setCurrentCh2","NavigateNext"],"sourceRoot":""}