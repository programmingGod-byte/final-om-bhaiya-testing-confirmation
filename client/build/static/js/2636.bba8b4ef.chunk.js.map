{"version":3,"file":"static/js/2636.bba8b4ef.chunk.js","mappings":"yLAYO,MA4BMA,EAAwBA,CAACC,EAAUC,EAAWC,KACzD,IAEE,MAAMC,EAAa,WAAWH,KAAYC,IAM1C,OALAG,aAAaC,QAAQF,EAAYD,EAAYI,YAG7CC,EAAqBP,IAEd,CACT,CAAE,MAAOQ,GAEP,OADAC,QAAQD,MAAM,mCAAoCA,IAC3C,CACT,GAOWD,EAAwBP,IACnC,IAEE,MAAMU,EAAiBC,OAAOC,KAAKR,cAAcS,QAAOC,GACtDA,EAAIC,WAAW,WAAWf,QAG5B,GAA8B,IAA1BU,EAAeM,OAAc,OAAO,EAGxC,MAAMC,EAAoBP,EAAeG,QAAOC,GAChB,SAA9BV,aAAac,QAAQJ,KACrBE,OAEIG,EAAaC,KAAKC,MAAOJ,EAAoBP,EAAeM,OAAU,KAK5E,OAFAZ,aAAaC,QAAQ,mBAAmBL,IAAYmB,EAAWb,YAExDa,CACT,CAAE,MAAOX,GAEP,OADAC,QAAQD,MAAM,kCAAmCA,GAC1C,CACT,GASWc,EAAqBA,CAACtB,EAAUC,KAC3C,IACE,MAAME,EAAa,WAAWH,KAAYC,IAC1C,MAA4C,SAArCG,aAAac,QAAQf,EAC9B,CAAE,MAAOK,GAEP,OADAC,QAAQD,MAAM,kCAAmCA,IAC1C,CACT,GAyBWe,EAAoBA,CAACvB,EAAUC,EAAWuB,KACrD,IAEE,MAAMC,EAAU,QAAQzB,KAAYC,IAQpC,OAPAG,aAAaC,QAAQoB,EAASD,EAAMlB,YAGhCkB,GAAS,IACXzB,EAAsBC,EAAUC,GAAW,IAGtC,CACT,CAAE,MAAOO,GAEP,OADAC,QAAQD,MAAM,gCAAiCA,IACxC,CACT,E,0cC3GF,IACE,MAAMkB,EAAcC,EAAQ,OAC5BC,EAAAA,EAAKC,iBAAiB,UAAWH,EACnC,CAAE,MAAOlB,GACPC,QAAQqB,KAAK,sCAAuCtB,EACtD,CAEA,MA6gBA,EA7gBoBuB,KAAO,IAADC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EACxB,MAAM,SAAEvC,EAAQ,UAAEC,IAAcuC,EAAAA,EAAAA,KAC1BC,GAAWC,EAAAA,EAAAA,OACVC,EAAQC,IAAaC,EAAAA,EAAAA,UAAS,OAC9BC,EAASC,IAAcF,EAAAA,EAAAA,UAAS,OAChCG,EAAgBC,IAAqBJ,EAAAA,EAAAA,UAAS,OAC9CK,EAASC,KAAcN,EAAAA,EAAAA,WAAS,IAChCO,GAAYC,KAAiBR,EAAAA,EAAAA,WAAS,IACtCS,GAAqBC,KAA0BV,EAAAA,EAAAA,WAAS,IACxDW,GAAoBC,KAAyBZ,EAAAA,EAAAA,WAAS,IACtDa,GAAcC,KAAmBd,EAAAA,EAAAA,WAAS,IAC1Ce,GAAiBC,KAAsBhB,EAAAA,EAAAA,UAAS,KAChDiB,GAAkBC,KAAuBlB,EAAAA,EAAAA,UAAS,YAClDrC,GAAOwD,KAAYnB,EAAAA,EAAAA,UAAS,OAC5BoB,GAAiBC,KAAsBrB,EAAAA,EAAAA,WAAS,IAChDsB,GAAUC,KAAevB,EAAAA,EAAAA,UAAS,MACnCwB,IAAUC,EAAAA,EAAAA,YAAWC,EAAAA,IAErBC,GAAwBA,KAAO,IAADC,EAClC,GAAY,OAAPJ,SAAO,IAAPA,IAAsB,QAAfI,EAAPJ,GAASK,qBAAa,IAAAD,IAAtBA,EAAwBE,SAAU,OAEvC,IAAIC,EAAYP,GAAQQ,oBAAsB,EACU,IAADC,EAAnDT,GAAQK,cAAcC,SAAS3D,OAAS4D,IACZ,QAA9BE,EAAAT,GAAQU,8BAAsB,IAAAD,GAA9BA,EAAAE,KAAAX,GAAiCO,GACjCnC,EAAS,YAAYzC,cAAqBqE,GAAQK,cAAcC,SAASC,GAAW3E,aACtF,GAcFgF,EAAAA,EAAAA,YAAU,KACR,IAAKjF,IAAa2C,IAAWA,EAAOuC,WAAY,OAChD,GAAY,OAAPb,SAAO,IAAPA,KAAAA,GAASc,KAEZ,YADAjB,IAAmB,GAIrBA,IAAmB,GAEOkB,WACxB,GAAKpF,GAAa2C,EAElB,IAAK,IAAD0C,EACF,MAAMC,QAAiBC,EAAAA,EAAMC,KAAK,GAAGC,EAAAA,8BAAqC,CACxEC,MAA6B,QAAxBL,EAAEhB,GAAQc,KAAKQ,iBAAS,IAAAN,OAAA,EAAtBA,EAAwBK,QAGH,IAADE,EAA7B,GAAwB,MAApBN,EAASO,OAEe,SAAtBlD,EAAOuC,YACkB,QAAzBU,EAACN,EAASQ,KAAKC,kBAAU,IAAAH,GAAxBA,EAA0BI,MAAKC,GAAOA,EAAIjG,WAAaA,KAC1DyC,EAAS,YAAYzC,IAG3B,CAAE,MAAOkG,GACPzF,QAAQD,MAAM,gCAAiC0F,EAEjD,GAGFC,EAAmB,GAClB,CAAQ,OAAP9B,SAAO,IAAPA,QAAO,EAAPA,GAASc,QAGbF,EAAAA,EAAAA,YAAU,KASH/B,GAPHkD,YAAW,KACTC,SAASC,iBAAiB,YAAYC,SAASC,IAC7C5E,EAAAA,EAAK6E,eAAeD,EAAM,GAC1B,GACD,EAKL,GACC,CAACtD,EAASF,KAGbiC,EAAAA,EAAAA,YAAU,KACsBG,WAC5B,IACEjC,IAAW,GAGX,IAAIuD,GAAaC,EAAAA,EAAAA,GAAc3G,GAC/B,IAAK0G,EACH,MAAM,IAAIE,MAAM,kBAAkB5G,eAGpC4C,EAAU8D,GAGV,IACE,MACMZ,SADiBP,EAAAA,EAAMsB,IAAI,GAAGpB,EAAAA,yBAA+BxF,MAC7C6F,KACtBrF,QAAQqG,IAAIhB,GACZ7C,EAAkB6C,GAGlB/C,EAAW,CACTgE,GAAIjB,EAAKiB,GACTC,MAAOlB,EAAKkB,MACZhH,SAAU8F,EAAK9F,UAEnB,CAAE,MAAOkG,GAKP,GAJAzF,QAAQD,MAAM,kCAAmC0F,GACjDlC,GAASkC,EAAIe,SAGC,OAAVP,QAAU,IAAVA,GAAAA,EAAY/B,SAAU,CACxB,MAAMuC,EAAeC,SAASlH,EAAW,IACnCmH,EAAkBV,EAAW/B,SAAS0C,MAAKC,GAAKA,EAAEP,KAAOG,IAE/D,IAAIE,EAWF,MAAM,IAAIR,MAAM,mBAAmB3G,eAVnC8C,EAAWqE,GAEXnE,EAAkB,CAChB8D,GAAIK,EAAgBL,GACpBC,MAAOI,EAAgBJ,MACvBO,YAAaH,EAAgBG,aAAe,GAC5CC,SAAUJ,EAAgBI,UAAY,GACtCC,aAAcL,EAAgBK,cAAgB,IAKpD,CACF,CAGA,GAAIxD,GACF,IACE,MAAMyD,QAAyBnC,EAAAA,EAAMsB,IAAI,GAAGpB,EAAAA,uBAA6BzF,KACzC,MAA5B0H,EAAiB7B,QACnBzB,GAAYsD,EAAiB5B,KAEjC,CAAE,MAAO6B,GACPlH,QAAQD,MAAM,2BAA4BmH,EAE5C,CAIF,GAAI1H,EAAW,CACb,MACM2H,EADqBC,KAAKC,MAAM1H,aAAac,QAAQ,uBAAyB,MAC5C8E,MACtC+B,GAAYA,EAAS/H,WAAaA,GAAY+H,EAAS9H,YAAcA,IAEvEsD,GAAuBqE,GAGvB,MAAMV,EAAeC,SAASlH,EAAW,IACnCC,GAAcoB,EAAAA,EAAAA,IAAmBtB,EAAUkH,GACjDzD,GAAsBvD,EACxB,CACF,CAAE,MAAOM,IACPC,QAAQD,MAAM,uBAAwBA,IACtCwD,GAASxD,GAAMyG,QACjB,CAAC,QACC9D,IAAW,EACb,GAGF6E,EAAuB,GACtB,CAAChI,EAAUC,EAAWgE,KAEzB,MAAMgE,GAAeA,KACnB5E,IAAeD,GAAW,EA4CtB8E,GAAe,SAACjB,GAAmC,IAA1BkB,EAAQC,UAAApH,OAAA,QAAAqH,IAAAD,UAAA,GAAAA,UAAA,GAAG,UACxCvE,GAAmBoD,GACnBlD,GAAoBoE,GACpBxE,IAAgB,EAClB,EAaA,GAAIT,EACF,OACEoF,EAAAA,EAAAA,KAACC,EAAAA,EAAG,CAACC,GAAI,CAAEC,QAAS,OAAQC,eAAgB,SAAUC,WAAY,SAAUC,OAAQ,QAASC,UAC3FP,EAAAA,EAAAA,KAACQ,EAAAA,EAAgB,MAMvB,GAAItI,KAAUmC,IAAWG,EACvB,OACEiG,EAAAA,EAAAA,MAACR,EAAAA,EAAG,CAACS,UAAU,2BAA2BR,GAAI,CAAES,UAAW,SAAUC,GAAI,GAAIL,SAAA,EAC3EP,EAAAA,EAAAA,KAACa,EAAAA,EAAU,CAACC,QAAQ,KAAIP,SACrBrI,IAAS,uBAEZ8H,EAAAA,EAAAA,KAACe,EAAAA,EAAM,CAACC,UAAWC,EAAAA,GAAMC,GAAG,WAAWhB,GAAI,CAAEiB,GAAI,GAAIZ,SAAC,uBAQ5D,MAAMa,GAAe/G,EAAOgC,SAC1BhC,EAAOgC,SAASgF,WAAUC,GAAMA,EAAG7C,KAAOI,SAASlH,EAAW,OAAQ,EAEjB,QAAf+B,EAAAW,EAAOgC,gBAAQ,IAAA3C,GAAfA,EAAiBhB,OAEzD,OACE+H,EAAAA,EAAAA,MAAAc,EAAAA,SAAA,CAAAhB,SAAA,CACG/F,IAAyB,OAAdE,QAAc,IAAdA,OAAc,EAAdA,EAAgBuE,eAC1Be,EAAAA,EAAAA,KAACwB,EAAAA,EAAG,CACF9C,MAAc,OAAPlE,QAAO,IAAPA,OAAO,EAAPA,EAASkE,MAChBO,aAA2B,OAAdvE,QAAc,IAAdA,OAAc,EAAdA,EAAgBuE,cAAe,GAC5CwC,IAAK,kBAKTzB,EAAAA,EAAAA,KAAC0B,EAAAA,GAAM,CACLC,OAAO,OACPC,KAAM9G,GACN+G,QAASlC,GAAaY,UAEtBE,EAAAA,EAAAA,MAACR,EAAAA,EAAG,CAACC,GAAI,CAAE4B,MAAO,IAAKC,EAAG,GAAIxB,SAAA,EAC5BP,EAAAA,EAAAA,KAACa,EAAAA,EAAU,CAACC,QAAQ,KAAKZ,GAAI,CAAE8B,GAAI,GAAIzB,UAC7B,OAAPxE,SAAO,IAAPA,IAAsB,QAAfpC,EAAPoC,GAASK,qBAAa,IAAAzC,OAAf,EAAPA,EAAwB+E,QAASrE,EAAOqE,SAE3CsB,EAAAA,EAAAA,KAACiC,EAAAA,EAAO,CAAC/B,GAAI,CAAE8B,GAAI,MACnBhC,EAAAA,EAAAA,KAACkC,EAAAA,EAAI,CAAA3B,SACa,QADb3G,EACFS,EAAOgC,gBAAQ,IAAAzC,OAAA,EAAfA,EAAiBuI,KAAIb,IACpB,MAAMc,EAAmBd,EAAG7C,KAAOI,SAASlH,EAAW,IACjDC,GAAcoB,EAAAA,EAAAA,IAAmBtB,EAAU4J,EAAG7C,IAEpD,OACEgC,EAAAA,EAAAA,MAAC4B,EAAAA,GAAQ,CAEPC,QAAM,EACNtB,UAAWC,EAAAA,GACXC,GAAI,YAAYxJ,cAAqB4J,EAAG7C,KACxC8D,SAAUH,EACVlC,GAAI,CACFsC,aAAc,EACdR,GAAI,GACJ,iBAAkB,CAChBS,QAAS,gBACTC,MAAO,yBAETnC,SAAA,CAED3I,IACCoI,EAAAA,EAAAA,KAAC2C,EAAAA,EAAW,CACVzC,GAAI,CACF0C,GAAI,EACJC,SAAU,OACVH,MAAO,mBAIb1C,EAAAA,EAAAA,KAAC8C,EAAAA,EAAY,CACXC,QAAS,GAAGzB,EAAG7C,OAAO6C,EAAG5C,QACzBsE,uBAAwB,CACtBC,WAAYb,EAAmB,OAAS,SACxCS,SAAU,cA3BTvB,EAAG7C,GA8BC,YAOrBgC,EAAAA,EAAAA,MAACR,EAAAA,EAAG,CAACS,UAAU,2BAA0BH,SAAA,EAEvCE,EAAAA,EAAAA,MAACR,EAAAA,EAAG,CAACC,GAAI,CAAE8B,GAAI,EAAG7B,QAAS,OAAQE,WAAY,SAAUD,eAAgB,iBAAkBG,SAAA,EACzFE,EAAAA,EAAAA,MAACR,EAAAA,EAAG,CAACC,GAAI,CAAEC,QAAS,OAAQE,WAAY,UAAWE,SAAA,EACjDP,EAAAA,EAAAA,KAACkD,EAAAA,EAAU,CAACC,QAASxD,GAAcO,GAAI,CAAE0C,GAAI,GAAIrC,UAC/CP,EAAAA,EAAAA,KAACoD,EAAAA,EAAI,OAEP3C,EAAAA,EAAAA,MAAC4C,EAAAA,EAAW,CAAA9C,SAAA,EACVP,EAAAA,EAAAA,KAACiB,EAAAA,GAAI,CAACC,GAAG,IAAIoC,MAAO,CAAEC,eAAgB,OAAQb,MAAO,WAAYnC,SAAC,UAGlEP,EAAAA,EAAAA,KAACiB,EAAAA,GAAI,CAACC,GAAG,WAAWoC,MAAO,CAAEC,eAAgB,OAAQb,MAAO,WAAYnC,SAAC,aAGzEP,EAAAA,EAAAA,KAACiB,EAAAA,GAAI,CAACC,GAAI,YAAYxJ,IAAY4L,MAAO,CAAEC,eAAgB,OAAQb,MAAO,WAAYnC,SAC5E,OAAPxE,SAAO,IAAPA,IAAsB,QAAflC,EAAPkC,GAASK,qBAAa,IAAAvC,OAAf,EAAPA,EAAwB6E,SAE3B+B,EAAAA,EAAAA,MAACI,EAAAA,EAAU,CAAC6B,MAAM,eAAcnC,SAAA,CAAC,WACf,OAAP/F,QAAO,IAAPA,OAAO,EAAPA,EAASkE,gBAIxBsB,EAAAA,EAAAA,KAACe,EAAAA,EAAM,CACLC,UAAWC,EAAAA,GACXC,GAAI,YAAYxJ,IAChB8L,WAAWxD,EAAAA,EAAAA,KAACyD,EAAAA,EAAS,IAAIlD,SAC1B,uBAMHE,EAAAA,EAAAA,MAACR,EAAAA,EAAG,CAACC,GAAI,CAAEC,QAAS,OAAQE,WAAY,SAAUD,eAAgB,gBAAiB4B,GAAI,GAAIzB,SAAA,EACzFE,EAAAA,EAAAA,MAACR,EAAAA,EAAG,CAACC,GAAI,CAAEC,QAAS,OAAQE,WAAY,UAAWE,SAAA,EACjDP,EAAAA,EAAAA,KAAC0D,EAAAA,EAAQ,CAACxD,GAAI,CAAE0C,GAAI,EAAGF,MAAO,mBAC9BjC,EAAAA,EAAAA,MAACI,EAAAA,EAAU,CAACC,QAAQ,YAAWP,SAAA,CAAC,WACd,OAAP/F,QAAO,IAAPA,OAAO,EAAPA,EAASkE,MACjBxD,KACC8E,EAAAA,EAAAA,KAAC2D,EAAAA,EAAI,CACHC,KAAK,QACLC,MAAM7D,EAAAA,EAAAA,KAAC2C,EAAAA,EAAW,IAClBmB,MAAM,YACNpB,MAAM,UACNxC,GAAI,CAAE6D,GAAI,YAKlBtD,EAAAA,EAAAA,MAACR,EAAAA,EAAG,CAACC,GAAI,CAAEC,QAAS,OAAQ6D,IAAK,GAAIzD,SAAA,EACjCrF,KACA8E,EAAAA,EAAAA,KAACe,EAAAA,EAAM,CACLD,QAAQ,WACR8C,KAAK,QACLJ,WAAWxD,EAAAA,EAAAA,KAAC2C,EAAAA,EAAW,IACvBQ,QA5Mec,KAC3B,IAAK5J,IAAWG,EAAS,OAEzB,MAAMoE,EAAeC,SAASlH,EAAW,KACzCF,EAAAA,EAAAA,IAAsBC,EAAUkH,GAAc,GAC9CzD,IAAsB,GACtByE,GAAa,+BAAgC,UAAU,EAsMbW,SAC/B,uBAIHP,EAAAA,EAAAA,KAACe,EAAAA,EAAM,CACLD,QAAQ,WACR8C,KAAK,QACLJ,UAAWxI,IAAsBgF,EAAAA,EAAAA,KAACkE,EAAAA,EAAQ,KAAMlE,EAAAA,EAAAA,KAACmE,EAAAA,EAAc,IAC/DhB,QA3MkBiB,KAC5B,IAAK/J,IAAWG,EAAS,OAEzB,MAAM6J,EAAqB9E,KAAKC,MAAM1H,aAAac,QAAQ,uBAAyB,MAC9E0L,EAAe,CACnB5M,WACAC,UAAWA,EAAUK,WACrBuM,YAAalK,EAAOqE,MACpB8F,aAAchK,EAAQkE,MACtB+F,WAAW,IAAIC,MAAOC,eAGxB,GAAI3J,GAAqB,CAEvB,MAAM4J,EAAmBP,EAAmB9L,QAC1CkH,KAAcA,EAAS/H,WAAaA,GAAY+H,EAAS9H,YAAcA,EAAUK,cAEnFF,aAAaC,QAAQ,qBAAsBwH,KAAKsF,UAAUD,IAC1D3J,IAAuB,GACvB2E,GAAa,2BAA4B,OAC3C,MAEEyE,EAAmBS,KAAKR,GACxBxM,aAAaC,QAAQ,qBAAsBwH,KAAKsF,UAAUR,IAC1DpJ,IAAuB,GACvB2E,GAAa,wEAAyE,UACxF,EAiLyCW,SAE9BvF,GAAsB,aAAe,oBAM5CyF,EAAAA,EAAAA,MAACsE,EAAAA,EAAK,CAACC,UAAW,EAAG9E,GAAI,CAAEsC,aAAc,EAAGyC,SAAU,SAAUjD,GAAI,GAAIzB,SAAA,EAEtEE,EAAAA,EAAAA,MAACR,EAAAA,EAAG,CAACC,GAAI,CAAE6B,EAAG,EAAGmD,GAAI,GAAI3E,SAAA,EACvBP,EAAAA,EAAAA,KAACa,EAAAA,EAAU,CAACC,QAAQ,KAAKqE,cAAY,EAAA5E,UACpB,OAAd7F,QAAc,IAAdA,OAAc,EAAdA,EAAgBgE,QAASlE,EAAQkE,OAAS,MAE7CsB,EAAAA,EAAAA,KAACa,EAAAA,EAAU,CAACC,QAAQ,YAAY4B,MAAM,iBAAiByC,cAAY,EAAA5E,UAClD,OAAd7F,QAAc,IAAdA,OAAc,EAAdA,EAAgBuE,cAAe,MAGnB,OAAdvE,QAAc,IAAdA,OAAc,EAAdA,EAAgB0K,iBACf3E,EAAAA,EAAAA,MAACI,EAAAA,EAAU,CAACC,QAAQ,QAAQ4B,MAAM,iBAAgBnC,SAAA,CAAC,mBAChC7F,EAAe0K,oBAO3B,OAAnB1K,IAA8D,IAAnCA,EAAe2K,iBAExCrF,EAAAA,EAAAA,KAAA,OACGU,UAAU,sHAEZ4E,wBAAyB,CAC1BC,OAAQC,EAAAA,EAAUC,SAAS/K,EAAegL,eAAiB,GAAI,CAC7DC,YAAa,CAAC,eAKhBlF,EAAAA,EAAAA,MAAAc,EAAAA,SAAA,CAAAhB,SAAA,CACiB,OAAd7F,QAAc,IAAdA,GAAwB,QAAVZ,EAAdY,EAAgBwE,gBAAQ,IAAApF,OAAV,EAAdA,EAA0BqI,KAAKyD,IAC9BnF,EAAAA,EAAAA,MAACR,EAAAA,EAAG,CAAkBC,GAAI,CAAE6B,EAAG,GAAIxB,SAAA,EACjCP,EAAAA,EAAAA,KAACa,EAAAA,EAAU,CAACH,UAAU,mIACvBI,QAAQ,KAAKqE,cAAY,EAACjF,GAAI,CAAEiB,GAAI,GAAIZ,SACpCqF,EAAQlH,OAAS,sBAEpBsB,EAAAA,EAAAA,KAAA,OACEU,UAAU,sHACf4E,wBAAyB,CAAEC,OAAQK,EAAQC,SAAW,QAP3CD,EAAQnH,OAaL,OAAd/D,QAAc,IAAdA,GAA4B,QAAdX,EAAdW,EAAgByE,oBAAY,IAAApF,OAAd,EAAdA,EAA8BrB,QAAS,IACtC+H,EAAAA,EAAAA,MAACR,EAAAA,EAAG,CAACC,GAAI,CAAE6B,EAAG,GAAIxB,SAAA,EAChBP,EAAAA,EAAAA,KAACa,EAAAA,EAAU,CAACC,QAAQ,KAAKqE,cAAY,EAACjF,GAAI,CAAEiB,GAAI,GAAIZ,SAAC,kBAGpD7F,EAAeyE,aAAagD,KAAK2D,IAChCrF,EAAAA,EAAAA,MAACR,EAAAA,EAAG,CAAkBC,GAAI,CAAE8B,GAAI,GAAIzB,SAAA,EAClCP,EAAAA,EAAAA,KAACa,EAAAA,EAAU,CAACC,QAAQ,KAAKqE,cAAY,EAAA5E,SAClCuF,EAAQpH,OAAS,sBAEpBsB,EAAAA,EAAAA,KAACa,EAAAA,EAAU,CAACC,QAAQ,QAAQqE,cAAY,EAAA5E,SACrCuF,EAAQ7G,aAAe,MAE1Be,EAAAA,EAAAA,KAAA,OAAKU,UAAU,wCAAuCH,UACpDP,EAAAA,EAAAA,KAAA,QAAMU,UAAWoF,EAAQC,UAAY,GAAGxF,SACrCuF,EAAQE,MAAQ,OAGpBF,EAAQG,cACPjG,EAAAA,EAAAA,KAACa,EAAAA,EAAU,CAACC,QAAQ,QAAQZ,GAAI,CAAEiB,GAAI,GAAIZ,SACvCuF,EAAQG,gBAdLH,EAAQrH,cAyBjB/D,KAA2C,QAAxBV,EAACU,EAAewE,gBAAQ,IAAAlF,GAAvBA,EAAyBtB,WAAsC,QAA5BuB,EAACS,EAAeyE,oBAAY,IAAAlF,GAA3BA,EAA6BvB,WACtFsH,EAAAA,EAAAA,KAACkG,EAAAA,EAAc,CACb1L,QAASA,EACT9C,SAAUA,EACVyO,iBA/PkBC,IACxBA,GACFjL,IAAsB,GACtByE,GAAa,mEAAoE,YAEjFA,GAAa,2DAA4D,UAC3E,EA0PUyG,cAAenK,SAMrBuE,EAAAA,EAAAA,MAACR,EAAAA,EAAG,CAACC,GAAI,CAAEC,QAAS,OAAQC,eAAgB,gBAAiB4B,GAAI,GAAIzB,SAAA,EACnEP,EAAAA,EAAAA,KAACe,EAAAA,EAAM,CACLD,QAAQ,WACR0C,WAAWxD,EAAAA,EAAAA,KAACsG,EAAAA,EAAc,IAC1BnD,QAldoBoD,KAAO,IAADC,EAClC,GAAY,OAAPzK,SAAO,IAAPA,IAAsB,QAAfyK,EAAPzK,GAASK,qBAAa,IAAAoK,IAAtBA,EAAwBnK,SAAU,OAEvC,IAAIoK,EAAY1K,GAAQQ,oBAAsB,EACzB,IAADmK,EAAhBD,GAAa,IACe,QAA9BC,EAAA3K,GAAQU,8BAAsB,IAAAiK,GAA9BA,EAAAhK,KAAAX,GAAiC0K,GACjCtM,EAAS,YAAYzC,cAAqBqE,GAAQK,cAAcC,SAASoK,GAAW9O,aACtF,EA2cuC4I,SAChC,sBAGDP,EAAAA,EAAAA,KAACe,EAAAA,EAAM,CACLD,QAAQ,YACR6F,SAAS3G,EAAAA,EAAAA,KAAC4G,EAAAA,EAAY,IACtBzD,QAASjH,GAAsBqE,SAChC,qBAMHP,EAAAA,EAAAA,KAAC6G,EAAAA,EAAQ,CACPjF,KAAMxG,GACN0L,iBAAkB,IAClBjF,QAASA,IAAMxG,IAAgB,GAAOkF,UAEtCP,EAAAA,EAAAA,KAAC+G,EAAAA,EAAK,CACJlF,QAASA,IAAMxG,IAAgB,GAC/BwE,SAAUrE,GAAiB+E,SAE1BjF,YAIN,C,2XCniBP,MAygBA,EAzgBuB0L,IAA6D,IAADC,EAAAC,EAAA,IAA3D,QAAE1M,EAAO,SAAE9C,EAAQ,iBAAEyO,EAAgB,cAAEE,GAAeW,EAC5E,MAAOG,IAAgBC,EAAAA,EAAAA,OAChBC,EAAiBC,IAAsB/M,EAAAA,EAAAA,UAAS,OAChDgN,EAAaC,IAAkBjN,EAAAA,EAAAA,UAAS,CAAC,IACzCkN,EAAeC,IAAoBnN,EAAAA,EAAAA,WAAS,IAC5CoN,EAAYC,IAAiBrN,EAAAA,EAAAA,UAAS,KACtCsB,EAAUC,IAAevB,EAAAA,EAAAA,UAAS,IAClCsN,EAAiBC,IAAsBvN,EAAAA,EAAAA,UAAS,CAAC,IACjDa,EAAcC,IAAmBd,EAAAA,EAAAA,WAAS,IAC1Ce,EAAiBC,KAAsBhB,EAAAA,EAAAA,UAAS,KAChDwN,GAAWC,KAAgBzN,EAAAA,EAAAA,UAAS,YACpC0N,GAAWC,KAAgB3N,EAAAA,EAAAA,UAAS,IACpC4N,GAAYC,KAAiB7N,EAAAA,EAAAA,WAAS,GAGvC8N,GAAUC,QACb9N,EAAQ+N,MAAQ/N,EAAQ+N,KAAKC,WAAahO,EAAQ+N,KAAKC,UAAU9P,OAAS,GAC1E8B,EAAQgO,WAAahO,EAAQgO,UAAU9P,OAAS,GAa7C+P,GARAjO,EAAQ+N,MAAQ/N,EAAQ+N,KAAKC,UACxBhO,EAAQ+N,KAAKC,UACXhO,EAAQgO,UACVhO,EAAQgO,UAEV,GAIHE,IAAwB,QAAZzB,EAAAzM,EAAQ+N,YAAI,IAAAtB,OAAA,EAAZA,EAAcvI,QAAS,GAAGlE,EAAQkE,aAC9CiK,IAA8B,QAAZzB,EAAA1M,EAAQ+N,YAAI,IAAArB,OAAA,EAAZA,EAAcjI,cAAe,kDAErDtC,EAAAA,EAAAA,YAAU,KAER,MAAMiM,EAAiB9Q,aAAac,QAAQ,aAAalB,KAAY8C,EAAQiE,MACzEmK,GACFhB,EAAcrI,KAAKC,MAAMoJ,IAI3B,MAAMC,EAAgB/Q,aAAac,QAAQ,YAAYlB,KAAY8C,EAAQiE,MAC3E,GAAIoK,EAAe,CACjBf,EAAmBvI,KAAKC,MAAMqJ,IAG9B,MAAMC,EAAcvJ,KAAKC,MAAMqJ,GACzBE,EAAoB1Q,OAAO2Q,OAAOF,GAAavQ,QAAO0Q,GAAOA,IAAKvQ,OAClEwQ,EAAgB1O,EAAQ0E,UAAYiK,MAAMC,QAAQ5O,EAAQ0E,UAAY1E,EAAQ0E,SAASxG,OAAS,EAClGwQ,EAAgB,GAClBpN,EAAYhD,KAAKC,MAAOgQ,EAAoBG,EAAiB,KAEjE,IACC,CAACxR,EAAU8C,EAAQiE,GAAIjE,EAAQ0E,YAGlCvC,EAAAA,EAAAA,YAAU,KACR,MAAM0M,EAAWlC,EAAa5I,IAAI,QAC9B8K,GAA0B,YAAbA,GAAuC,SAAbA,GACzCrB,GAAaqB,EACf,GACC,CAAClC,IA2FJ,IAAK3M,EACH,OAAOwF,EAAAA,EAAAA,KAACC,EAAAA,EAAG,CAACC,GAAI,CAAE6B,EAAG,GAAIxB,UAACP,EAAAA,EAAAA,KAACa,EAAAA,EAAU,CAAAN,SAAC,wBAIxC,MAAM+I,IAAiB9O,EAAQ0E,WAAaiK,MAAMC,QAAQ5O,EAAQ0E,WAAyC,IAA5B1E,EAAQ0E,SAASxG,OAEhG,OACE+H,EAAAA,EAAAA,MAACR,EAAAA,EAAG,CAAAM,SAAA,EACFE,EAAAA,EAAAA,MAACR,EAAAA,EAAG,CAACC,GAAI,CAAE6B,EAAG,EAAGU,QAAS,eAAgBC,MAAO,SAAUnC,SAAA,EACzDP,EAAAA,EAAAA,KAACa,EAAAA,EAAU,CAACC,QAAQ,KAAKqE,cAAY,EAAA5E,SAAE/F,EAAQkE,SAC/CsB,EAAAA,EAAAA,KAACa,EAAAA,EAAU,CAACC,QAAQ,YAAWP,SAAE/F,EAAQyE,kBAG3Ce,EAAAA,EAAAA,KAACC,EAAAA,EAAG,CAACC,GAAI,CAAEqJ,aAAc,EAAGC,YAAa,WAAYjJ,UACnDE,EAAAA,EAAAA,MAACR,EAAAA,EAAG,CAACC,GAAI,CAAEC,QAAS,QAASI,SAAA,EAC3BP,EAAAA,EAAAA,KAACe,EAAAA,EAAM,CACLoC,QAASA,IAAM6E,GAAa,WAC5B9H,GAAI,CACFU,GAAI,EACJ6I,GAAI,EACJF,aAA4B,YAAdxB,GAA0B,YAAc,OACtDyB,YAAa,eACb9G,MAAqB,YAAdqF,GAA0B,eAAiB,eAClDvF,aAAc,EACdS,WAA0B,YAAd8E,GAA0B,OAAS,UAC/CxH,SACH,YAGA8H,KACCrI,EAAAA,EAAAA,KAACe,EAAAA,EAAM,CACLoC,QAASA,IAAM6E,GAAa,QAC5B9H,GAAI,CACFU,GAAI,EACJ6I,GAAI,EACJF,aAA4B,SAAdxB,GAAuB,YAAc,OACnDyB,YAAa,eACb9G,MAAqB,SAAdqF,GAAuB,eAAiB,eAC/CvF,aAAc,EACdS,WAA0B,SAAd8E,GAAuB,OAAS,UAC5CxH,SACH,eAOPP,EAAAA,EAAAA,KAACC,EAAAA,EAAG,CAACC,GAAI,CAAE6B,EAAG,GAAIxB,SACD,YAAdwH,IACCtH,EAAAA,EAAAA,MAAAc,EAAAA,SAAA,CAAAhB,SAAA,CACG+I,IACC7I,EAAAA,EAAAA,MAACsE,EAAAA,EAAK,CAACC,UAAW,EAAGlE,QAAQ,WAAWZ,GAAI,CAAE6B,EAAG,EAAGS,aAAc,EAAG7B,UAAW,UAAWJ,SAAA,EACzFP,EAAAA,EAAAA,KAACa,EAAAA,EAAU,CAACC,QAAQ,KAAKqE,cAAY,EAAA5E,SAAC,yBACtCP,EAAAA,EAAAA,KAACa,EAAAA,EAAU,CAACC,QAAQ,QAAOP,SAAC,uGAM9B/F,EAAQ0E,SAASiD,KAAKyD,IACpBnF,EAAAA,EAAAA,MAACiJ,EAAAA,EAAS,CAERC,SAAUtC,IAAoBzB,EAAQnH,GACtCmL,SAAUA,IA1JGC,KAI3B,GAHAvC,EAAmBD,IAAoBwC,EAAY,KAAOA,GAGtDxC,IAAoBwC,IAAchC,EAAgBgC,GAAY,CAChE,MAAMC,EAAkB,IAAKjC,EAAiB,CAACgC,IAAY,GAC3D/B,EAAmBgC,GAGnBhS,aAAaC,QAAQ,YAAYL,KAAY8C,EAAQiE,KAAMc,KAAKsF,UAAUiF,IAG1E,MAAMf,EAAoB1Q,OAAO2Q,OAAOc,GAAiBvR,QAAO0Q,GAAOA,IAAKvQ,OACtEwQ,EAAgB1O,EAAQ0E,UAAYiK,MAAMC,QAAQ5O,EAAQ0E,UAAY1E,EAAQ0E,SAASxG,OAAS,EAClGwQ,EAAgB,GAClBpN,EAAYhD,KAAKC,MAAOgQ,EAAoBG,EAAiB,KAEjE,GAyI8Ba,CAAoBnE,EAAQnH,IAC5CyB,GAAI,CACF8B,GAAI,EACJiD,SAAU,SACVxC,QAASoF,EAAgBjC,EAAQnH,IAAM,0BAA4B,cACnEuL,SAAU,YACVzJ,SAAA,EAEFP,EAAAA,EAAAA,KAACiK,EAAAA,EAAgB,CAACC,YAAYlK,EAAAA,EAAAA,KAACmK,EAAAA,EAAU,IAAKjK,GAAI,CAAEuC,QAAS,gBAAiBlC,UAC5EE,EAAAA,EAAAA,MAACR,EAAAA,EAAG,CAACC,GAAI,CAAEC,QAAS,OAAQE,WAAY,SAAUyB,MAAO,OAAQ1B,eAAgB,iBAAkBG,SAAA,EACjGE,EAAAA,EAAAA,MAACI,EAAAA,EAAU,CAACX,GAAI,CAAE+C,WAAYoE,IAAoBzB,EAAQnH,GAAK,OAAS,UAAW8B,SAAA,CAChFqF,EAAQnH,GAAG,MAAImH,EAAQlH,MACvBmJ,EAAgBjC,EAAQnH,MACvBuB,EAAAA,EAAAA,KAAC2D,EAAAA,EAAI,CACHG,MAAM,YACNF,KAAK,QACLlB,MAAM,UACNxC,GAAI,CAAE6D,GAAI,EAAGzD,OAAQ,GAAIuC,SAAU,gBAIzC7C,EAAAA,EAAAA,KAACe,EAAAA,EAAM,CACL6C,KAAK,QACLT,QAAUiH,IACRA,EAAEC,kBA9GFR,KACtB,IAAIjF,EACA+C,EAAW2C,SAAST,IACtBjF,EAAmB+C,EAAWpP,QAAOkG,GAAMA,IAAOoL,IAClDtO,GAAmB,sBAEnBqJ,EAAmB,IAAI+C,EAAYkC,GACnCtO,GAAmB,iEAGrBqM,EAAchD,GACd9M,aAAaC,QAAQ,aAAaL,KAAY8C,EAAQiE,KAAMc,KAAKsF,UAAUD,IAC3EvJ,GAAgB,EAAK,EAmGCkP,CAAe3E,EAAQnH,GAAG,EAE5B+E,UAAWmE,EAAW2C,SAAS1E,EAAQnH,KAAMuB,EAAAA,EAAAA,KAACkE,EAAAA,EAAQ,CAACxB,MAAM,aAAe1C,EAAAA,EAAAA,KAACmE,EAAAA,EAAc,IAC3FjE,GAAI,CAAE6D,GAAI,GAAIxD,SAEboH,EAAW2C,SAAS1E,EAAQnH,IAAM,aAAe,mBAIxDuB,EAAAA,EAAAA,KAACwK,EAAAA,EAAgB,CAAAjK,UACfP,EAAAA,EAAAA,KAACC,EAAAA,EAAG,CAACC,GAAI,CAAE6B,EAAG,GAAKuD,wBAAyB,CAAEC,OAAQK,EAAQC,eArC3DD,EAAQnH,MA2ClBkJ,EAAWjP,OAAS,IAAM4Q,KACzB7I,EAAAA,EAAAA,MAACR,EAAAA,EAAG,CAACC,GAAI,CAAEiB,GAAI,EAAGa,GAAI,GAAIzB,SAAA,EACxBP,EAAAA,EAAAA,KAACa,EAAAA,EAAU,CAACC,QAAQ,KAAKqE,cAAY,EAAA5E,SAAC,8BAGtCP,EAAAA,EAAAA,KAAC+E,EAAAA,EAAK,CAACC,UAAW,EAAGlE,QAAQ,WAAWZ,GAAI,CAAE6B,EAAG,EAAGS,aAAc,GAAIjC,UACpEP,EAAAA,EAAAA,KAACyK,EAAAA,GAAI,CAACC,WAAS,EAACC,QAAS,EAAEpK,SACxBoH,EAAWxF,KAAIyI,IACd,MAAMhF,EAAUpL,EAAQ0E,SAASH,MAAK8L,GAAKA,EAAEpM,KAAOmM,IACpD,OAAKhF,GAGH5F,EAAAA,EAAAA,KAACyK,EAAAA,GAAI,CAACK,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAE1K,UAC9BP,EAAAA,EAAAA,KAAC+E,EAAAA,EAAK,CACJjE,QAAQ,WACRZ,GAAI,CACF6B,EAAG,EACHmJ,OAAQ,UACR,UAAW,CAAEzI,QAAS,wBAExBU,QAASA,KACPmE,EAAmBsD,GACnB9M,YAAW,KAAO,IAADqN,EACiC,QAAhDA,EAAApN,SAASqN,eAAe,WAAWR,YAAa,IAAAO,GAAhDA,EAAkDE,eAAe,CAAEC,SAAU,UAAW,GACvF,IAAI,EACP/K,UAEFE,EAAAA,EAAAA,MAACR,EAAAA,EAAG,CAACC,GAAI,CAAEC,QAAS,OAAQE,WAAY,UAAWE,SAAA,EACjDP,EAAAA,EAAAA,KAACkE,EAAAA,EAAQ,CAACxB,MAAM,UAAUxC,GAAI,CAAE0C,GAAI,EAAGC,SAAU,WACjD7C,EAAAA,EAAAA,KAACa,EAAAA,EAAU,CAACC,QAAQ,QAAQmC,WAAW,SAAQ1C,SAC5CqF,EAAQlH,cAlBqBkM,GAHnB,IAyBZ,WAQlBpQ,EAAQ+Q,UAAY/Q,EAAQ+Q,SAAS7S,OAAS,IAC7C+H,EAAAA,EAAAA,MAAAc,EAAAA,SAAA,CAAAhB,SAAA,EACEP,EAAAA,EAAAA,KAACa,EAAAA,EAAU,CAACC,QAAQ,KAAKqE,cAAY,EAACjF,GAAI,CAAEiB,GAAI,EAAGa,GAAI,GAAIzB,SAAC,mBAI5DP,EAAAA,EAAAA,KAACyK,EAAAA,GAAI,CAACC,WAAS,EAACC,QAAS,EAAEpK,SACxB/F,EAAQ+Q,SAASpJ,KAAK2D,IACrB9F,EAAAA,EAAAA,KAACyK,EAAAA,GAAI,CAACK,MAAI,EAACC,GAAI,GAAIE,GAAI,EAAE1K,UACvBE,EAAAA,EAAAA,MAACsE,EAAAA,EAAK,CAACC,UAAW,EAAG9E,GAAI,CAAEsC,aAAc,EAAGyC,SAAU,UAAW1E,SAAA,EAC/DE,EAAAA,EAAAA,MAACR,EAAAA,EAAG,CAACC,GAAI,CAAEuC,QAAS,eAAgBC,MAAO,uBAAwBX,EAAG,EAAG5B,QAAS,OAAQE,WAAY,UAAWE,SAAA,EAC/GP,EAAAA,EAAAA,KAACwL,EAAAA,EAAI,CAACtL,GAAI,CAAE0C,GAAI,MAChB5C,EAAAA,EAAAA,KAACa,EAAAA,EAAU,CAACC,QAAQ,KAAIP,SAAEuF,EAAQpH,YAEpC+B,EAAAA,EAAAA,MAACR,EAAAA,EAAG,CAACC,GAAI,CAAE6B,EAAG,GAAIxB,SAAA,EAChBP,EAAAA,EAAAA,KAACa,EAAAA,EAAU,CAACC,QAAQ,QAAQ2K,WAAS,EAAAlL,SAAEuF,EAAQ7G,eAC/Ce,EAAAA,EAAAA,KAAC+E,EAAAA,EAAK,CAACjE,QAAQ,WAAWZ,GAAI,CAC5B6B,EAAG,EACHU,QAAS,UACTC,MAAO,UACPgJ,WAAY,YACZC,WAAY,WACZC,UAAW,OACX/I,SAAU,YACVtC,SACCuF,EAAQE,QAEXhG,EAAAA,EAAAA,KAACa,EAAAA,EAAU,CAACC,QAAQ,YAAYZ,GAAI,CAAEiB,GAAI,EAAG8B,WAAY,QAAS1C,SAAC,kBACnEP,EAAAA,EAAAA,KAACa,EAAAA,EAAU,CAACC,QAAQ,QAAOP,SAAEuF,EAAQG,qBApBZH,EAAQrH,WA6B9CjE,EAAQqR,QAAUrR,EAAQqR,OAAOnT,OAAS,IACzC+H,EAAAA,EAAAA,MAAAc,EAAAA,SAAA,CAAAhB,SAAA,EACEP,EAAAA,EAAAA,KAACa,EAAAA,EAAU,CAACC,QAAQ,KAAKqE,cAAY,EAACjF,GAAI,CAAEiB,GAAI,EAAGa,GAAI,GAAIzB,SAAC,qBAI5DP,EAAAA,EAAAA,KAACyK,EAAAA,GAAI,CAACC,WAAS,EAACC,QAAS,EAAEpK,SACxB/F,EAAQqR,OAAO1J,KAAK2J,IACnB9L,EAAAA,EAAAA,KAACyK,EAAAA,GAAI,CAACK,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAE1K,UAC9BP,EAAAA,EAAAA,KAAC+L,EAAAA,EAAI,CAAC7L,GAAI,CAAEI,OAAQ,OAAQH,QAAS,OAAQ6L,cAAe,UAAWzL,UACrEP,EAAAA,EAAAA,KAACiM,EAAAA,EAAc,CAACjL,UAAU,IAAIkL,KAAMJ,EAAMrK,IAAK0K,OAAO,SAASC,IAAI,sBAAqB7L,UACtFE,EAAAA,EAAAA,MAACR,EAAAA,EAAG,CAACC,GAAI,CAAE8J,SAAU,YAAazJ,SAAA,EAChCP,EAAAA,EAAAA,KAACqM,EAAAA,EAAS,CACRrL,UAAU,MACVV,OAAO,MACPgM,MAAOR,EAAMS,UACbC,IAAKV,EAAMpN,SAEbsB,EAAAA,EAAAA,KAACC,EAAAA,EAAG,CAACC,GAAI,CACP8J,SAAU,WACVyC,IAAK,EACLC,KAAM,EACN5K,MAAO,OACPxB,OAAQ,OACRH,QAAS,OACTE,WAAY,SACZD,eAAgB,SAChBuM,WAAY,kBACZC,WAAY,kBACZ,UAAW,CAAED,WAAY,oBACzBpM,UACAP,EAAAA,EAAAA,KAAC6M,EAAAA,EAAS,CAAC3M,GAAI,CAAE2C,SAAU,GAAIH,MAAO,qBAvBVoJ,EAAMrN,eAmCtDgC,EAAAA,EAAAA,MAAAc,EAAAA,SAAA,CAAAhB,SAAA,EACEP,EAAAA,EAAAA,KAACa,EAAAA,EAAU,CAACC,QAAQ,KAAKqE,cAAY,EAACjF,GAAI,CAAE8B,GAAI,GAAIzB,SAAC,kBAIrDE,EAAAA,EAAAA,MAACsE,EAAAA,EAAK,CAAC7E,GAAI,CAAE6B,EAAG,EAAGS,aAAc,GAAIjC,SAAA,EACnCE,EAAAA,EAAAA,MAACR,EAAAA,EAAG,CAACC,GAAI,CAAEC,QAAS,OAAQE,WAAY,SAAU2B,GAAI,GAAIzB,SAAA,EACxDP,EAAAA,EAAAA,KAAC8M,EAAAA,EAAI,CAAC5M,GAAI,CAAE0C,GAAI,EAAGF,MAAO,mBAC1B1C,EAAAA,EAAAA,KAACa,EAAAA,EAAU,CAACC,QAAQ,KAAIP,SAAEmI,SAG5B1I,EAAAA,EAAAA,KAACa,EAAAA,EAAU,CAACC,QAAQ,QAAQ2K,WAAS,EAAAlL,SAClCoI,KAGFlB,GAAiBQ,KAChBxH,EAAAA,EAAAA,MAACsG,EAAAA,EAAK,CACJlH,SAAUsI,GAAa,UAAY,UACnCjI,GAAI,CAAE8B,GAAI,GAAIzB,SAAA,EAEdP,EAAAA,EAAAA,KAACa,EAAAA,EAAU,CAACC,QAAQ,YAAWP,SAC5B4H,GACG,wCACA,4CAEN1H,EAAAA,EAAAA,MAACI,EAAAA,EAAU,CAACC,QAAQ,QAAOP,SAAA,CAAC,eACb0H,GAAU8E,QAAQ,GAAG,UAKvCtE,GAActG,KAAI,CAAC6K,EAAUC,KAAW,IAADC,EACtC,MAAMC,EAAaH,EAASvO,IAAMwO,EAClC,OACExM,EAAAA,EAAAA,MAACR,EAAAA,EAAG,CAAkBC,GAAI,CAAE8B,GAAI,EAAGkD,GAAI,EAAGqE,aAAc0D,EAAQxE,GAAc/P,OAAS,EAAI,oBAAsB,QAAS6H,SAAA,EACxHE,EAAAA,EAAAA,MAACI,EAAAA,EAAU,CAACC,QAAQ,YAAYqE,cAAY,EAAA5E,SAAA,CACzC0M,EAAQ,EAAE,KAAGD,EAASA,aAGzBhN,EAAAA,EAAAA,KAACoN,EAAAA,EAAW,CAACpM,UAAU,WAAWd,GAAI,CAAE6D,GAAI,GAAIxD,UAC9CP,EAAAA,EAAAA,KAACqN,EAAAA,EAAU,CACTC,MAAO/F,EAAY4F,IAAe,GAClCvD,SAAWQ,GAnVNmD,EAACJ,EAAYG,KACtC9F,GAAegG,IAAI,IACdA,EACH,CAACL,GAAaG,KACb,EA+UkCC,CAAmBJ,EAAYM,OAAOrD,EAAE+B,OAAOmB,QAAQ/M,SAEvEyM,EAASU,QAAQvL,KAAI,CAACwL,EAAQC,KAE7B,MAAMC,EAA6B,kBAAXF,EAAsBA,EAAOlP,GAAKmP,EACpDE,EAA+B,kBAAXH,EAAsBA,EAAOI,KAAOJ,EAE9D,OACE3N,EAAAA,EAAAA,KAACgO,EAAAA,EAAgB,CAEfV,MAAOO,EACPI,SAASjO,EAAAA,EAAAA,KAACkO,EAAAA,EAAK,IACfpK,MAAOgK,EACPK,SAAU1G,EACVvH,GAAI,IACEuH,GAAiBoG,IAAab,EAASoB,eAAiB,CAC1D1L,MAAO,eACPO,WAAY,WAEVwE,GAAiBF,EAAY4F,KAAgBU,GAAYtG,EAAY4F,KAAgBH,EAASoB,eAAiB,CACjH1L,MAAO,gBAXNmL,EAcL,QAMTpG,IACChH,EAAAA,EAAAA,MAACR,EAAAA,EAAG,CAACC,GAAI,CAAEiB,GAAI,EAAG4C,GAAI,GAAIxD,SAAA,CACvBgH,EAAY4F,KAAgBH,EAASoB,eACpC3N,EAAAA,EAAAA,MAACI,EAAAA,EAAU,CAACC,QAAQ,QAAQZ,GAAI,CAAEwC,MAAO,eAAgBvC,QAAS,OAAQE,WAAY,UAAWE,SAAA,EAC/FP,EAAAA,EAAAA,KAACqO,EAAAA,EAAK,CAACxL,SAAS,QAAQ3C,GAAI,CAAE0C,GAAI,MAAS,eAI7CnC,EAAAA,EAAAA,MAACI,EAAAA,EAAU,CAACC,QAAQ,QAAQZ,GAAI,CAAEwC,MAAO,cAAenC,SAAA,CAAC,qCAED,kBAA7CyM,EAASU,QAAQV,EAASoB,eACW,QADgBlB,EACxDF,EAASU,QAAQV,EAASoB,sBAAc,IAAAlB,OAAA,EAAxCA,EAA0Ca,KAC1Cf,EAASU,QAAQV,EAASoB,mBAKpCpO,EAAAA,EAAAA,KAACa,EAAAA,EAAU,CAACC,QAAQ,QAAQZ,GAAI,CAAEiB,GAAI,EAAGmN,UAAW,UAAW/N,SAC5DyM,EAAS/G,mBAvDRkH,EA2DJ,KAIV1M,EAAAA,EAAAA,MAACR,EAAAA,EAAG,CAACC,GAAI,CAAEC,QAAS,OAAQC,eAAgB,gBAAiBe,GAAI,GAAIZ,SAAA,CAClEkH,GACCzH,EAAAA,EAAAA,KAACe,EAAAA,EAAM,CACLD,QAAQ,WACRqC,QArWAoL,KAChB/G,EAAe,CAAC,GAChBE,GAAiB,GACjBQ,GAAa,GACbE,IAAc,EAAM,EAkWJ5E,WAAWxD,EAAAA,EAAAA,KAACwO,EAAAA,EAAU,IAAIjO,SAC3B,iBAIDP,EAAAA,EAAAA,KAACe,EAAAA,EAAM,CACLD,QAAQ,YACRqC,QA/YOsL,KAEvB,IAAIC,EAAe,EACfC,EAAiB,EAEjBlG,GAAc/P,OAAS,IACzBiW,EAAiBlG,GAAc/P,OAE/B+P,GAAcxK,SAAQ,CAAC+O,EAAUC,KAC/B,MAAME,EAAaH,EAASvO,IAAMwO,EAC9B1F,EAAY4F,KAAgBH,EAASoB,eACvCM,GACF,KAIJ,MAAMxV,EAAQyV,EAAiB,EAAKD,EAAeC,EAAkB,IAAM,EACrEvI,EAASlN,GAAS,GAExBgP,GAAahP,GACbkP,GAAchC,GACdsB,GAAiB,GAGbtB,IACFnN,EAAAA,EAAAA,IAAkBvB,EAAU8C,EAAQiE,GAAIvF,GAItCiN,GACFA,EAAiBC,EAAQlN,EAC3B,EAiXgBsK,WAAWxD,EAAAA,EAAAA,KAACqO,EAAAA,EAAK,IACjBF,SAAU9V,OAAOC,KAAKiP,GAAa7O,SAAW+P,GAAc/P,OAAO6H,SACpE,oBAKHP,EAAAA,EAAAA,KAACe,EAAAA,EAAM,CACLD,QAAQ,WACRqC,QAjWUyL,KACpBvI,GACFA,GACF,EA+VcM,SAAS3G,EAAAA,EAAAA,KAAC6O,EAAAA,EAAY,IAAItO,SAC3B,6BASXP,EAAAA,EAAAA,KAAC6G,EAAAA,EAAQ,CACPjF,KAAMxG,EACN0L,iBAAkB,IAClBjF,QAASA,IAAMxG,GAAgB,GAC/BsD,QAASrD,MAEP,C","sources":["utils/progressTracker.js","pages/ChapterView.jsx","components/ChapterContent.jsx"],"sourcesContent":["/**\r\n * Progress Tracker Utility\r\n * \r\n * This utility provides functions to track and manage a user's progress through modules and chapters.\r\n * It uses localStorage to persist progress data across sessions.\r\n */\r\n\r\n/**\r\n * Initialize progress data for a module\r\n * @param {string} moduleId - The ID of the module\r\n * @param {Array} chapterIds - Array of chapter IDs in the module\r\n */\r\nexport const initializeProgressData = (moduleId, chapterIds) => {\r\n  try {\r\n    // Check if module progress already exists\r\n    const moduleProgress = localStorage.getItem(`module-progress-${moduleId}`);\r\n    \r\n    if (!moduleProgress) {\r\n      // Initialize module progress to 0\r\n      localStorage.setItem(`module-progress-${moduleId}`, '0');\r\n      \r\n      // Initialize chapter progress\r\n      chapterIds.forEach(chapterId => {\r\n        const chapterKey = `chapter-${moduleId}-${chapterId}`;\r\n        if (localStorage.getItem(chapterKey) === null) {\r\n          localStorage.setItem(chapterKey, 'false');\r\n        }\r\n      });\r\n    }\r\n  } catch (error) {\r\n    console.error('Error initializing progress data:', error);\r\n  }\r\n};\r\n\r\n/**\r\n * Update a chapter's completion status\r\n * @param {string} moduleId - The ID of the module\r\n * @param {string|number} chapterId - The ID of the chapter\r\n * @param {boolean} isCompleted - Whether the chapter is completed\r\n */\r\nexport const updateChapterProgress = (moduleId, chapterId, isCompleted) => {\r\n  try {\r\n    // Update chapter progress\r\n    const chapterKey = `chapter-${moduleId}-${chapterId}`;\r\n    localStorage.setItem(chapterKey, isCompleted.toString());\r\n    \r\n    // Update overall module progress\r\n    updateModuleProgress(moduleId);\r\n    \r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error updating chapter progress:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * Calculate and update the overall module completion percentage\r\n * @param {string} moduleId - The ID of the module\r\n */\r\nexport const updateModuleProgress = (moduleId) => {\r\n  try {\r\n    // Find all chapters for this module\r\n    const allChapterKeys = Object.keys(localStorage).filter(key => \r\n      key.startsWith(`chapter-${moduleId}-`)\r\n    );\r\n    \r\n    if (allChapterKeys.length === 0) return 0;\r\n    \r\n    // Calculate completion percentage\r\n    const completedChapters = allChapterKeys.filter(key => \r\n      localStorage.getItem(key) === 'true'\r\n    ).length;\r\n    \r\n    const percentage = Math.round((completedChapters / allChapterKeys.length) * 100);\r\n    \r\n    // Save to localStorage\r\n    localStorage.setItem(`module-progress-${moduleId}`, percentage.toString());\r\n    \r\n    return percentage;\r\n  } catch (error) {\r\n    console.error('Error updating module progress:', error);\r\n    return 0;\r\n  }\r\n};\r\n\r\n/**\r\n * Get a chapter's completion status\r\n * @param {string} moduleId - The ID of the module\r\n * @param {string|number} chapterId - The ID of the chapter\r\n * @returns {boolean} - Whether the chapter is completed\r\n */\r\nexport const getChapterProgress = (moduleId, chapterId) => {\r\n  try {\r\n    const chapterKey = `chapter-${moduleId}-${chapterId}`;\r\n    return localStorage.getItem(chapterKey) === 'true';\r\n  } catch (error) {\r\n    console.error('Error getting chapter progress:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * Get the overall module completion percentage\r\n * @param {string} moduleId - The ID of the module\r\n * @returns {number} - Percentage of module completion (0-100)\r\n */\r\nexport const getModuleProgress = (moduleId) => {\r\n  try {\r\n    const progress = localStorage.getItem(`module-progress-${moduleId}`);\r\n    return progress ? parseInt(progress, 10) : 0;\r\n  } catch (error) {\r\n    console.error('Error getting module progress:', error);\r\n    return 0;\r\n  }\r\n};\r\n\r\n/**\r\n * Mark a quiz as completed and update chapter progress\r\n * @param {string} moduleId - The ID of the module\r\n * @param {string|number} chapterId - The ID of the chapter\r\n * @param {number} score - The quiz score (0-100)\r\n * @returns {boolean} - Whether the operation was successful\r\n */\r\nexport const markQuizCompleted = (moduleId, chapterId, score) => {\r\n  try {\r\n    // Save quiz score\r\n    const quizKey = `quiz-${moduleId}-${chapterId}`;\r\n    localStorage.setItem(quizKey, score.toString());\r\n    \r\n    // Mark chapter as completed if score is passing (>=70%)\r\n    if (score >= 70) {\r\n      updateChapterProgress(moduleId, chapterId, true);\r\n    }\r\n    \r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error marking quiz completed:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * Get the quiz score for a chapter\r\n * @param {string} moduleId - The ID of the module\r\n * @param {string|number} chapterId - The ID of the chapter\r\n * @returns {number|null} - The quiz score (0-100) or null if not taken\r\n */\r\nexport const getQuizScore = (moduleId, chapterId) => {\r\n  try {\r\n    const quizKey = `quiz-${moduleId}-${chapterId}`;\r\n    const score = localStorage.getItem(quizKey);\r\n    return score ? parseFloat(score) : null;\r\n  } catch (error) {\r\n    console.error('Error getting quiz score:', error);\r\n    return null;\r\n  }\r\n}; ","import React, { useState, useEffect, useContext } from 'react';\nimport { useParams, Link, useNavigate } from 'react-router-dom';\nimport DOMPurify from 'dompurify';\n\n\nimport axios from \"axios\";\nimport { \n  Box, Typography, Button, Breadcrumbs, Paper, CircularProgress,\n  Divider, IconButton, Drawer, List, ListItem, ListItemText,\n  Snackbar, Alert, Chip\n} from '@mui/material';\nimport { \n  ArrowBack, MenuBook, Menu, NavigateBefore, NavigateNext,\n  BookmarkBorder, Bookmark, CheckCircle\n} from '@mui/icons-material';\n\n// Import the module data and the ChapterContent component\nimport { getModuleById } from '../data/modules';\nimport ChapterContent from '../components/ChapterContent';\nimport { getChapterProgress, updateChapterProgress } from '../utils/progressTracker';\nimport URLSITE from '../constant';\nimport hljs from 'highlight.js';\n// import 'highlight.js/styles/googlecode.css'\n// import 'highlight.js/styles/';\nimport 'highlight.js/styles/atom-one-dark.css';\n\nimport SEO from \"./SEO\"\n// Import Verilog highlighting - make sure you have this installed\nimport 'highlight.js/lib/languages/verilog';\nimport AuthContext from '../context/AuthContext';\n\n// Register Verilog language with highlight.js if available\ntry {\n  const verilogLang = require('highlight.js/lib/languages/verilog');\n  hljs.registerLanguage('verilog', verilogLang);\n} catch (error) {\n  console.warn('Verilog highlighting not available:', error);\n}\n\nconst ChapterView = () => {\n  const { moduleId, chapterId } = useParams();\n  const navigate = useNavigate();\n  const [module, setModule] = useState(null);\n  const [chapter, setChapter] = useState(null);\n  const [chapterContent, setChapterContent] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [drawerOpen, setDrawerOpen] = useState(false);\n  const [isChapterBookmarked, setIsChapterBookmarked] = useState(false);\n  const [isChapterCompleted, setIsChapterCompleted] = useState(false);\n  const [snackbarOpen, setSnackbarOpen] = useState(false);\n  const [snackbarMessage, setSnackbarMessage] = useState('');\n  const [snackbarSeverity, setSnackbarSeverity] = useState('success');\n  const [error, setError] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [progress, setProgress] = useState(null);\n  const context = useContext(AuthContext);\n\n  const navigateToNextChapter = () => {\n    if (!context?.currentModule?.chapters) return;\n    \n    let nextIndex = context.currentChapterIndex + 1;\n    if (context.currentModule.chapters.length > nextIndex) {\n      context.setCurrentChapterIndex?.(nextIndex);\n      navigate(`/modules/${moduleId}/chapters/${context.currentModule.chapters[nextIndex].chapterId}`);\n    }\n  };\n\n  const navigateToPrevChapter = () => {\n    if (!context?.currentModule?.chapters) return;\n    \n    let prevIndex = context.currentChapterIndex - 1;\n    if (prevIndex >= 0) {\n      context.setCurrentChapterIndex?.(prevIndex);\n      navigate(`/modules/${moduleId}/chapters/${context.currentModule.chapters[prevIndex].chapterId}`);\n    }\n  };\n\n  // Check user access to paid modules\n  useEffect(() => {\n    if (!moduleId || !module || !module.moduleType) return;\n    if (!context?.user) {\n      setIsAuthenticated(false);\n      return;\n    }\n    \n    setIsAuthenticated(true);\n    \n    const checkModuleAccess = async () => {\n      if (!moduleId || !module) return;\n      \n      try {\n        const response = await axios.post(`${URLSITE}/api/general/user-by-email`, { \n          email: context.user.wholeData?.email \n        });\n        \n        if (response.status === 200) {\n          // If module is not free and user doesn't have access, redirect\n          if (module.moduleType !== \"free\" && \n              !response.data.paidModule?.some(mod => mod.moduleId === moduleId)) {\n            navigate(`/modules/${moduleId}`);\n          }\n        }\n      } catch (err) {\n        console.error('Error checking module access:', err);\n        // Don't redirect on error, just log it\n      }\n    };\n\n    checkModuleAccess();\n  }, [context?.user]);\n\n  // Apply syntax highlighting\n  useEffect(() => {\n    const applyHighlighting = () => {\n      setTimeout(() => {\n        document.querySelectorAll('pre code').forEach((block) => {\n          hljs.highlightBlock(block);\n        });\n      }, 0);\n    };\n    \n    if (!loading) {\n      applyHighlighting();\n    }\n  }, [loading, chapterContent]);\n\n  // Fetch module and chapter data\n  useEffect(() => {\n    const fetchModuleAndChapter = async () => {\n      try {\n        setLoading(true);\n        \n        // Get module data\n        let moduleData = getModuleById(moduleId);\n        if (!moduleData) {\n          throw new Error(`Module with ID ${moduleId} not found`);\n        }\n        \n        setModule(moduleData);\n        \n        // Fetch chapter content from server using chapterId\n        try {\n          const response = await axios.get(`${URLSITE}/api/general/chapter/${chapterId}`);\n          const data = response.data;\n          console.log(data)\n          setChapterContent(data);\n          \n          // Set chapter basic info\n          setChapter({\n            id: data.id,\n            title: data.title,\n            moduleId: data.moduleId\n          });\n        } catch (err) {\n          console.error('Error fetching chapter content:', err);\n          setError(err.message);\n          \n          // Fallback to module data if API fetch fails\n          if (moduleData?.chapters) {\n            const chapterIdNum = parseInt(chapterId, 10);\n            const fallbackChapter = moduleData.chapters.find(c => c.id === chapterIdNum);\n            \n            if (fallbackChapter) {\n              setChapter(fallbackChapter);\n              // Create minimal chapter content structure\n              setChapterContent({\n                id: fallbackChapter.id,\n                title: fallbackChapter.title,\n                description: fallbackChapter.description || \"\",\n                sections: fallbackChapter.sections || [],\n                codeExamples: fallbackChapter.codeExamples || []\n              });\n            } else {\n              throw new Error(`Chapter with ID ${chapterId} not found`);\n            }\n          }\n        }\n        \n        // Get progress data if authenticated\n        if (isAuthenticated) {\n          try {\n            const progressResponse = await axios.get(`${URLSITE}/api/user/progress/${moduleId}`);\n            if (progressResponse.status === 200) {\n              setProgress(progressResponse.data);\n            }\n          } catch (progressErr) {\n            console.error('Error fetching progress:', progressErr);\n            // Continue without progress data\n          }\n        }\n        \n        // Check if this chapter is bookmarked\n        if (chapterId) {\n          const bookmarkedChapters = JSON.parse(localStorage.getItem('bookmarkedChapters') || '[]');\n          const isBookmarked = bookmarkedChapters.some(\n            bookmark => bookmark.moduleId === moduleId && bookmark.chapterId === chapterId\n          );\n          setIsChapterBookmarked(isBookmarked);\n          \n          // Check if chapter is completed\n          const chapterIdNum = parseInt(chapterId, 10);\n          const isCompleted = getChapterProgress(moduleId, chapterIdNum);\n          setIsChapterCompleted(isCompleted);\n        }\n      } catch (error) {\n        console.error('Error fetching data:', error);\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchModuleAndChapter();\n  }, [moduleId, chapterId, isAuthenticated]);\n\n  const toggleDrawer = () => {\n    setDrawerOpen(!drawerOpen);\n  };\n\n  // Handle chapter completion\n  const markChapterCompleted = () => {\n    if (!module || !chapter) return;\n    \n    const chapterIdNum = parseInt(chapterId, 10);\n    updateChapterProgress(moduleId, chapterIdNum, true);\n    setIsChapterCompleted(true);\n    showSnackbar('Chapter marked as completed!', 'success');\n  };\n\n  // Handle chapter bookmarking\n  const toggleChapterBookmark = () => {\n    if (!module || !chapter) return;\n    \n    const bookmarkedChapters = JSON.parse(localStorage.getItem('bookmarkedChapters') || '[]');\n    const bookmarkData = {\n      moduleId,\n      chapterId: chapterId.toString(),\n      moduleTitle: module.title,\n      chapterTitle: chapter.title,\n      timestamp: new Date().toISOString()\n    };\n    \n    if (isChapterBookmarked) {\n      // Remove bookmark\n      const updatedBookmarks = bookmarkedChapters.filter(\n        bookmark => !(bookmark.moduleId === moduleId && bookmark.chapterId === chapterId.toString())\n      );\n      localStorage.setItem('bookmarkedChapters', JSON.stringify(updatedBookmarks));\n      setIsChapterBookmarked(false);\n      showSnackbar('Chapter bookmark removed', 'info');\n    } else {\n      // Add bookmark\n      bookmarkedChapters.push(bookmarkData);\n      localStorage.setItem('bookmarkedChapters', JSON.stringify(bookmarkedChapters));\n      setIsChapterBookmarked(true);\n      showSnackbar('Chapter bookmarked successfully! Access it anytime from your profile.', 'success');\n    }\n  };\n  \n  // Show snackbar message\n  const showSnackbar = (message, severity = 'success') => {\n    setSnackbarMessage(message);\n    setSnackbarSeverity(severity);\n    setSnackbarOpen(true);\n  };\n  \n  // Handle quiz completion from ChapterContent\n  const handleQuizCompletion = (passed) => {\n    if (passed) {\n      setIsChapterCompleted(true);\n      showSnackbar('Congratulations! You passed the quiz and completed this chapter.', 'success');\n    } else {\n      showSnackbar('You need to score at least 70% to complete this chapter.', 'warning');\n    }\n  };\n  \n  // Render loading state\n  if (loading) {\n    return (\n      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '80vh' }}>\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  // Render error state if module or chapter not found\n  if (error || !module || !chapter) {\n    return (\n      <Box className=\"container page-container\" sx={{ textAlign: 'center', py: 8 }}>\n        <Typography variant=\"h5\">\n          {error || \"Content not found\"}\n        </Typography>\n        <Button component={Link} to=\"/modules\" sx={{ mt: 2 }}>\n          Back to Modules\n        </Button>\n      </Box>\n    );\n  }\n\n  // Calculate chapter navigation info\n  const currentIndex = module.chapters ? \n    module.chapters.findIndex(ch => ch.id === parseInt(chapterId, 10)) : -1;\n  const isFirstChapter = currentIndex === 0;\n  const isLastChapter = currentIndex === (module.chapters?.length - 1) || currentIndex === -1;\n\n  return (\n    <>\n      {chapter && chapterContent?.description && (\n        <SEO \n          title={chapter?.title} \n          description={chapterContent?.description || \"\"} \n          url={\"verigeek.xyz\"}\n        />\n      )}\n      \n      {/* Drawer for chapter navigation */}\n      <Drawer\n        anchor=\"left\"\n        open={drawerOpen}\n        onClose={toggleDrawer}\n      >\n        <Box sx={{ width: 300, p: 2 }}>\n          <Typography variant=\"h6\" sx={{ mb: 2 }}>\n            {context?.currentModule?.title || module.title}\n          </Typography>\n          <Divider sx={{ mb: 2 }} />\n          <List>\n            {module.chapters?.map(ch => {\n              const isCurrentChapter = ch.id === parseInt(chapterId, 10);\n              const isCompleted = getChapterProgress(moduleId, ch.id);\n              \n              return (\n                <ListItem \n                  key={ch.id}\n                  button \n                  component={Link}\n                  to={`/modules/${moduleId}/chapters/${ch.id}`}\n                  selected={isCurrentChapter}\n                  sx={{ \n                    borderRadius: 1,\n                    mb: 0.5,\n                    '&.Mui-selected': {\n                      bgcolor: 'primary.light',\n                      color: 'primary.contrastText',\n                    }\n                  }}\n                >\n                  {isCompleted && (\n                    <CheckCircle \n                      sx={{ \n                        mr: 1, \n                        fontSize: '1rem',\n                        color: 'success.main'\n                      }} \n                    />\n                  )}\n                  <ListItemText \n                    primary={`${ch.id}. ${ch.title}`} \n                    primaryTypographyProps={{\n                      fontWeight: isCurrentChapter ? 'bold' : 'normal',\n                      fontSize: '0.9rem'\n                    }}\n                  />\n                </ListItem>\n              );\n            })}\n          </List>\n        </Box>\n      </Drawer>\n\n      <Box className=\"container page-container\">\n        {/* Header with navigation */}\n        <Box sx={{ mb: 3, display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n          <Box sx={{ display: 'flex', alignItems: 'center' }}>\n            <IconButton onClick={toggleDrawer} sx={{ mr: 1 }}>\n              <Menu />\n            </IconButton>\n            <Breadcrumbs>\n              <Link to=\"/\" style={{ textDecoration: 'none', color: 'inherit' }}>\n                Home\n              </Link>\n              <Link to=\"/modules\" style={{ textDecoration: 'none', color: 'inherit' }}>\n                Modules\n              </Link>\n              <Link to={`/modules/${moduleId}`} style={{ textDecoration: 'none', color: 'inherit' }}>\n                {context?.currentModule?.title}\n              </Link>\n              <Typography color=\"text.primary\">\n                Chapter {chapter?.title}\n              </Typography>\n            </Breadcrumbs>\n          </Box>\n          <Button \n            component={Link} \n            to={`/modules/${moduleId}`}\n            startIcon={<ArrowBack />}\n          >\n            Back to Module\n          </Button>\n        </Box>\n\n        {/* Chapter progress indicator */}\n        <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 3 }}>\n          <Box sx={{ display: 'flex', alignItems: 'center' }}>\n            <MenuBook sx={{ mr: 1, color: 'primary.main' }} />\n            <Typography variant=\"subtitle1\">\n              Chapter {chapter?.title}\n              {isChapterCompleted && (\n                <Chip \n                  size=\"small\" \n                  icon={<CheckCircle />} \n                  label=\"Completed\" \n                  color=\"success\" \n                  sx={{ ml: 2 }}\n                />\n              )}\n            </Typography>\n          </Box>\n          <Box sx={{ display: 'flex', gap: 1 }}>\n            {!isChapterCompleted && (\n              <Button\n                variant=\"outlined\"\n                size=\"small\"\n                startIcon={<CheckCircle />}\n                onClick={markChapterCompleted}\n              >\n                Mark as Completed\n              </Button>\n            )}\n            <Button\n              variant=\"outlined\"\n              size=\"small\"\n              startIcon={isChapterBookmarked ? <Bookmark /> : <BookmarkBorder />}\n              onClick={toggleChapterBookmark}\n            >\n              {isChapterBookmarked ? 'Bookmarked' : 'Bookmark'}\n            </Button>\n          </Box>\n        </Box>\n\n        {/* Main content */}\n        <Paper elevation={0} sx={{ borderRadius: 2, overflow: 'hidden', mb: 4 }}>\n          {/* Chapter title */}\n          <Box sx={{ p: 4, pb: 2 }}>\n            <Typography variant=\"h4\" gutterBottom>\n              {chapterContent?.title || chapter.title || \"\"}\n            </Typography>\n            <Typography variant=\"subtitle1\" color=\"text.secondary\" gutterBottom>\n              {chapterContent?.description || \"\"}\n            </Typography>\n            \n            {chapterContent?.estimatedTime && (\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Estimated time: {chapterContent.estimatedTime}\n              </Typography>\n            )}\n          </Box>\n          \n          {/* Display each section content */}\n          {\n  chapterContent !== null && chapterContent.isNewEditorUsed === true ? (\n    \n    <div\n       className=\"prose prose-purple max-w-none bg-white p-4 rounded-lg shadow-lg border border-purple-200 min-h-full preview-content\"\n                               \n     dangerouslySetInnerHTML={{\n    __html: DOMPurify.sanitize(chapterContent.editorContent || \"\", {\n      FORBID_ATTR: ['style'], // strips all inline styles\n    }),\n  }}\n    />\n  ) : (\n    <>\n      {chapterContent?.sections?.map((section) => (\n        <Box key={section.id} sx={{ p: 4 }}>\n          <Typography className='className=\"prose prose-purple max-w-none bg-white p-4 rounded-lg shadow-lg border border-purple-200 min-h-full preview-content\"\n       ' variant=\"h5\" gutterBottom sx={{ mt: 2 }}>\n            {section.title || \"Untitled Section\"}\n          </Typography>\n          <div\n            className=\"prose prose-purple max-w-none bg-white p-4 rounded-lg shadow-lg border border-purple-200 min-h-full preview-content\"\n       dangerouslySetInnerHTML={{ __html: section.content || \"\" }}\n          />\n        </Box>\n      ))}\n      \n      {/* Code examples section */}\n      {chapterContent?.codeExamples?.length > 0 && (\n        <Box sx={{ p: 4 }}>\n          <Typography variant=\"h5\" gutterBottom sx={{ mt: 2 }}>\n            Code Examples\n          </Typography>\n          {chapterContent.codeExamples.map((example) => (\n            <Box key={example.id} sx={{ mb: 4 }}>\n              <Typography variant=\"h6\" gutterBottom>\n                {example.title || \"Untitled Example\"}\n              </Typography>\n              <Typography variant=\"body2\" gutterBottom>\n                {example.description || \"\"}\n              </Typography>\n              <pre className=\"bg-gray-100 p-4 rounded overflow-auto\">\n                <code className={example.language || \"\"}>\n                  {example.code || \"\"}\n                </code>\n              </pre>\n              {example.explanation && (\n                <Typography variant=\"body2\" sx={{ mt: 2 }}>\n                  {example.explanation}\n                </Typography>\n              )}\n            </Box>\n          ))}\n        </Box>\n      )}\n    </>\n  )\n}\n          {/* If no content is available, use the ChapterContent component as fallback */}\n          {(!chapterContent || (!chapterContent.sections?.length && !chapterContent.codeExamples?.length)) && (\n            <ChapterContent \n              chapter={chapter} \n              moduleId={moduleId} \n              onQuizCompletion={handleQuizCompletion}\n              onNextChapter={navigateToNextChapter}\n            />\n          )}\n        </Paper>\n\n        {/* Navigation buttons */}\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 4 }}>\n          <Button \n            variant=\"outlined\"\n            startIcon={<NavigateBefore />}\n            onClick={navigateToPrevChapter}\n          >\n            Previous Chapter\n          </Button>\n          <Button \n            variant=\"contained\"\n            endIcon={<NavigateNext />}\n            onClick={navigateToNextChapter}\n          >\n            Next Chapter\n          </Button>\n        </Box>\n\n        {/* Snackbar for notifications */}\n        <Snackbar\n          open={snackbarOpen}\n          autoHideDuration={6000}\n          onClose={() => setSnackbarOpen(false)}\n        >\n          <Alert \n            onClose={() => setSnackbarOpen(false)} \n            severity={snackbarSeverity}\n          >\n            {snackbarMessage}\n          </Alert>\n        </Snackbar>\n      </Box>\n    </>\n  );\n};\n\nexport default ChapterView;","import React, { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { \n  Box, Typography, Paper, Accordion, AccordionSummary, AccordionDetails,\n  Divider, Button, Grid, Card, CardContent, CardMedia, CardActionArea, \n  Chip, Radio, RadioGroup, FormControlLabel, FormControl, Alert, Snackbar\n} from '@mui/material';\nimport { \n  ExpandMore, PlayArrow, Code, Quiz, Check, VideoLibrary,\n  Assignment, BookmarkBorder, Bookmark, ArrowForward, Close\n} from '@mui/icons-material';\nimport { markQuizCompleted } from '../utils/progressTracker';\n\nconst ChapterContent = ({ chapter, moduleId, onQuizCompletion, onNextChapter }) => {\n  const [searchParams] = useSearchParams();\n  const [expandedSection, setExpandedSection] = useState(null);\n  const [quizAnswers, setQuizAnswers] = useState({});\n  const [quizSubmitted, setQuizSubmitted] = useState(false);\n  const [bookmarked, setBookmarked] = useState([]);\n  const [progress, setProgress] = useState(0);\n  const [sectionProgress, setSectionProgress] = useState({});\n  const [snackbarOpen, setSnackbarOpen] = useState(false);\n  const [snackbarMessage, setSnackbarMessage] = useState('');\n  const [activeTab, setActiveTab] = useState('content');\n  const [quizScore, setQuizScore] = useState(0);\n  const [quizPassed, setQuizPassed] = useState(false);\n\n  // Check if the chapter has quiz questions in either chapter.quiz.questions or chapter.questions\n  const hasQuiz = Boolean(\n    (chapter.quiz && chapter.quiz.questions && chapter.quiz.questions.length > 0) ||\n    (chapter.questions && chapter.questions.length > 0)\n  );\n\n  // Get the questions from the correct location\n  const getQuizQuestions = () => {\n    if (chapter.quiz && chapter.quiz.questions) {\n      return chapter.quiz.questions;\n    } else if (chapter.questions) {\n      return chapter.questions;\n    }\n    return [];\n  };\n\n  const quizQuestions = getQuizQuestions();\n  const quizTitle = chapter.quiz?.title || `${chapter.title} Quiz`;\n  const quizDescription = chapter.quiz?.description || 'Test your knowledge of this chapter\\'s content.';\n\n  useEffect(() => {\n    // Load bookmarks from localStorage\n    const savedBookmarks = localStorage.getItem(`bookmarks-${moduleId}-${chapter.id}`);\n    if (savedBookmarks) {\n      setBookmarked(JSON.parse(savedBookmarks));\n    }\n    \n    // Load progress from localStorage\n    const savedProgress = localStorage.getItem(`progress-${moduleId}-${chapter.id}`);\n    if (savedProgress) {\n      setSectionProgress(JSON.parse(savedProgress));\n      \n      // Calculate overall progress\n      const progressObj = JSON.parse(savedProgress);\n      const completedSections = Object.values(progressObj).filter(val => val).length;\n      const totalSections = chapter.sections && Array.isArray(chapter.sections) ? chapter.sections.length : 0;\n      if (totalSections > 0) {\n        setProgress(Math.round((completedSections / totalSections) * 100));\n      }\n    }\n  }, [moduleId, chapter.id, chapter.sections]);\n\n  // Set active tab based on URL parameters\n  useEffect(() => {\n    const tabParam = searchParams.get('tab');\n    if (tabParam && (tabParam === 'content' || tabParam === 'quiz')) {\n      setActiveTab(tabParam);\n    }\n  }, [searchParams]);\n\n  const handleSectionChange = (sectionId) => {\n    setExpandedSection(expandedSection === sectionId ? null : sectionId);\n    \n    // Mark section as read when expanded\n    if (expandedSection !== sectionId && !sectionProgress[sectionId]) {\n      const updatedProgress = { ...sectionProgress, [sectionId]: true };\n      setSectionProgress(updatedProgress);\n      \n      // Save progress to localStorage\n      localStorage.setItem(`progress-${moduleId}-${chapter.id}`, JSON.stringify(updatedProgress));\n      \n      // Update overall progress\n      const completedSections = Object.values(updatedProgress).filter(val => val).length;\n      const totalSections = chapter.sections && Array.isArray(chapter.sections) ? chapter.sections.length : 0;\n      if (totalSections > 0) {\n        setProgress(Math.round((completedSections / totalSections) * 100));\n      }\n    }\n  };\n\n  const handleAnswerChange = (questionId, value) => {\n    setQuizAnswers(prev => ({\n      ...prev,\n      [questionId]: value\n    }));\n  };\n\n  const handleQuizSubmit = () => {\n    // Calculate the score\n    let correctCount = 0;\n    let totalQuestions = 0;\n    \n    if (quizQuestions.length > 0) {\n      totalQuestions = quizQuestions.length;\n      \n      quizQuestions.forEach((question, index) => {\n        const questionId = question.id || index;\n        if (quizAnswers[questionId] === question.correctAnswer) {\n          correctCount++;\n        }\n      });\n    }\n    \n    const score = totalQuestions > 0 ? (correctCount / totalQuestions) * 100 : 0;\n    const passed = score >= 70; // Pass threshold is 70%\n    \n    setQuizScore(score);\n    setQuizPassed(passed);\n    setQuizSubmitted(true);\n    \n    // Save the quiz result to localStorage\n    if (passed) {\n      markQuizCompleted(moduleId, chapter.id, score);\n    }\n    \n    // Notify the parent component\n    if (onQuizCompletion) {\n      onQuizCompletion(passed, score);\n    }\n  };\n\n  const resetQuiz = () => {\n    setQuizAnswers({});\n    setQuizSubmitted(false);\n    setQuizScore(0);\n    setQuizPassed(false);\n  };\n\n  const toggleBookmark = (sectionId) => {\n    let updatedBookmarks;\n    if (bookmarked.includes(sectionId)) {\n      updatedBookmarks = bookmarked.filter(id => id !== sectionId);\n      setSnackbarMessage('Bookmark removed');\n    } else {\n      updatedBookmarks = [...bookmarked, sectionId];\n      setSnackbarMessage('Bookmark added - you can access this later from your profile');\n    }\n    \n    setBookmarked(updatedBookmarks);\n    localStorage.setItem(`bookmarks-${moduleId}-${chapter.id}`, JSON.stringify(updatedBookmarks));\n    setSnackbarOpen(true);\n  };\n\n  const handleNextChapter = () => {\n    if (onNextChapter) {\n      onNextChapter();\n    }\n  };\n\n  if (!chapter) {\n    return <Box sx={{ p: 3 }}><Typography>Chapter not found</Typography></Box>;\n  }\n\n  // Check if sections exist and provide a fallback message if not\n  const hasNoSections = !chapter.sections || !Array.isArray(chapter.sections) || chapter.sections.length === 0;\n\n  return (\n    <Box>\n      <Box sx={{ p: 3, bgcolor: 'primary.main', color: 'white' }}>\n        <Typography variant=\"h4\" gutterBottom>{chapter.title}</Typography>\n        <Typography variant=\"subtitle1\">{chapter.description}</Typography>\n      </Box>\n      \n      <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\n        <Box sx={{ display: 'flex' }}>\n          <Button \n            onClick={() => setActiveTab('content')}\n            sx={{ \n              py: 2, \n              px: 3, \n              borderBottom: activeTab === 'content' ? '2px solid' : 'none',\n              borderColor: 'primary.main',\n              color: activeTab === 'content' ? 'primary.main' : 'text.primary',\n              borderRadius: 0,\n              fontWeight: activeTab === 'content' ? 'bold' : 'normal'\n            }}\n          >\n            Content\n          </Button>\n          {hasQuiz && (\n            <Button \n              onClick={() => setActiveTab('quiz')}\n              sx={{ \n                py: 2, \n                px: 3, \n                borderBottom: activeTab === 'quiz' ? '2px solid' : 'none',\n                borderColor: 'primary.main',\n                color: activeTab === 'quiz' ? 'primary.main' : 'text.primary',\n                borderRadius: 0,\n                fontWeight: activeTab === 'quiz' ? 'bold' : 'normal'\n              }}\n            >\n              Quiz\n            </Button>\n          )}\n        </Box>\n      </Box>\n      \n      <Box sx={{ p: 3 }}>\n        {activeTab === 'content' ? (\n          <>\n            {hasNoSections ? (\n              <Paper elevation={0} variant=\"outlined\" sx={{ p: 3, borderRadius: 2, textAlign: 'center' }}>\n                <Typography variant=\"h6\" gutterBottom>Content Coming Soon</Typography>\n                <Typography variant=\"body1\">\n                  The content for this chapter is currently being developed. \n                  Please check back later for updates.\n                </Typography>\n              </Paper>\n            ) : (\n              chapter.sections.map((section) => (\n                <Accordion \n                  key={section.id}\n                  expanded={expandedSection === section.id}\n                  onChange={() => handleSectionChange(section.id)}\n                  sx={{ \n                    mb: 2, \n                    overflow: 'hidden',\n                    bgcolor: sectionProgress[section.id] ? 'rgba(76, 175, 80, 0.04)' : 'transparent',\n                    position: 'relative'\n                  }}\n                >\n                  <AccordionSummary expandIcon={<ExpandMore />} sx={{ bgcolor: 'action.hover' }}>\n                    <Box sx={{ display: 'flex', alignItems: 'center', width: '100%', justifyContent: 'space-between' }}>\n                      <Typography sx={{ fontWeight: expandedSection === section.id ? 'bold' : 'normal' }}>\n                        {section.id} - {section.title}\n                        {sectionProgress[section.id] && (\n                          <Chip\n                            label=\"Completed\"\n                            size=\"small\"\n                            color=\"success\"\n                            sx={{ ml: 2, height: 20, fontSize: '0.6rem' }}\n                          />\n                        )}\n                      </Typography>\n                      <Button \n                        size=\"small\" \n                        onClick={(e) => {\n                          e.stopPropagation();\n                          toggleBookmark(section.id);\n                        }}\n                        startIcon={bookmarked.includes(section.id) ? <Bookmark color=\"primary\" /> : <BookmarkBorder />}\n                        sx={{ ml: 2 }}\n                      >\n                        {bookmarked.includes(section.id) ? 'Bookmarked' : 'Bookmark'}\n                      </Button>\n                    </Box>\n                  </AccordionSummary>\n                  <AccordionDetails>\n                    <Box sx={{ p: 1 }} dangerouslySetInnerHTML={{ __html: section.content }} />\n                  </AccordionDetails>\n                </Accordion>\n              ))\n            )}\n            \n            {bookmarked.length > 0 && !hasNoSections && (\n              <Box sx={{ mt: 4, mb: 4 }}>\n                <Typography variant=\"h6\" gutterBottom>\n                  Your Bookmarked Sections\n                </Typography>\n                <Paper elevation={0} variant=\"outlined\" sx={{ p: 2, borderRadius: 2 }}>\n                  <Grid container spacing={2}>\n                    {bookmarked.map(bookmarkId => {\n                      const section = chapter.sections.find(s => s.id === bookmarkId);\n                      if (!section) return null;\n                      \n                      return (\n                        <Grid item xs={12} sm={6} md={4} key={bookmarkId}>\n                          <Paper \n                            variant=\"outlined\" \n                            sx={{ \n                              p: 2, \n                              cursor: 'pointer',\n                              '&:hover': { bgcolor: 'rgba(0, 0, 0, 0.03)' }\n                            }}\n                            onClick={() => {\n                              setExpandedSection(bookmarkId);\n                              setTimeout(() => {\n                                document.getElementById(`section-${bookmarkId}`)?.scrollIntoView({ behavior: 'smooth' });\n                              }, 100);\n                            }}\n                          >\n                            <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                              <Bookmark color=\"primary\" sx={{ mr: 1, fontSize: '1rem' }} />\n                              <Typography variant=\"body2\" fontWeight=\"medium\">\n                                {section.title}\n                              </Typography>\n                            </Box>\n                          </Paper>\n                        </Grid>\n                      );\n                    })}\n                  </Grid>\n                </Paper>\n              </Box>\n            )}\n            \n            {chapter.examples && chapter.examples.length > 0 && (\n              <>\n                <Typography variant=\"h5\" gutterBottom sx={{ mt: 4, mb: 2 }}>\n                  Code Examples\n                </Typography>\n                \n                <Grid container spacing={3}>\n                  {chapter.examples.map((example) => (\n                    <Grid item xs={12} md={6} key={example.id}>\n                      <Paper elevation={2} sx={{ borderRadius: 2, overflow: 'hidden' }}>\n                        <Box sx={{ bgcolor: 'primary.main', color: 'primary.contrastText', p: 2, display: 'flex', alignItems: 'center' }}>\n                          <Code sx={{ mr: 1 }} />\n                          <Typography variant=\"h6\">{example.title}</Typography>\n                        </Box>\n                        <Box sx={{ p: 2 }}>\n                          <Typography variant=\"body2\" paragraph>{example.description}</Typography>\n                          <Paper variant=\"outlined\" sx={{ \n                            p: 2, \n                            bgcolor: '#272822', \n                            color: '#f8f8f2', \n                            fontFamily: 'monospace',\n                            whiteSpace: 'pre-wrap',\n                            overflowX: 'auto',\n                            fontSize: '0.875rem'\n                          }}>\n                            {example.code}\n                          </Paper>\n                          <Typography variant=\"subtitle2\" sx={{ mt: 2, fontWeight: 'bold' }}>Explanation:</Typography>\n                          <Typography variant=\"body2\">{example.explanation}</Typography>\n                        </Box>\n                      </Paper>\n                    </Grid>\n                  ))}\n                </Grid>\n              </>\n            )}\n            \n            {chapter.videos && chapter.videos.length > 0 && (\n              <>\n                <Typography variant=\"h5\" gutterBottom sx={{ mt: 4, mb: 2 }}>\n                  Video Resources\n                </Typography>\n                \n                <Grid container spacing={3}>\n                  {chapter.videos.map((video) => (\n                    <Grid item xs={12} sm={6} md={4} key={video.id}>\n                      <Card sx={{ height: '100%', display: 'flex', flexDirection: 'column' }}>\n                        <CardActionArea component=\"a\" href={video.url} target=\"_blank\" rel=\"noopener noreferrer\">\n                          <Box sx={{ position: 'relative' }}>\n                            <CardMedia\n                              component=\"img\"\n                              height=\"140\"\n                              image={video.thumbnail}\n                              alt={video.title}\n                            />\n                            <Box sx={{ \n                              position: 'absolute', \n                              top: 0, \n                              left: 0, \n                              width: '100%', \n                              height: '100%', \n                              display: 'flex', \n                              alignItems: 'center', \n                              justifyContent: 'center',\n                              background: 'rgba(0,0,0,0.3)',\n                              transition: 'background 0.3s',\n                              '&:hover': { background: 'rgba(0,0,0,0.5)' }\n                            }}>\n                              <PlayArrow sx={{ fontSize: 60, color: 'white' }} />\n                            </Box>\n                          </Box>\n                        </CardActionArea>\n                      </Card>\n                    </Grid>\n                  ))}\n                </Grid>\n              </>\n            )}\n          </>\n        ) : (\n          <>\n            <Typography variant=\"h5\" gutterBottom sx={{ mb: 2 }}>\n              Chapter Quiz\n            </Typography>\n            \n            <Paper sx={{ p: 3, borderRadius: 2 }}>\n              <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\n                <Quiz sx={{ mr: 1, color: 'primary.main' }} />\n                <Typography variant=\"h6\">{quizTitle}</Typography>\n              </Box>\n              \n              <Typography variant=\"body2\" paragraph>\n                {quizDescription}\n              </Typography>\n              \n              {quizSubmitted && quizScore && (\n                <Alert \n                  severity={quizPassed ? \"success\" : \"warning\"} \n                  sx={{ mb: 3 }}\n                >\n                  <Typography variant=\"subtitle2\">\n                    {quizPassed \n                      ? \"Congratulations! You passed the quiz.\" \n                      : \"You need to review this chapter again.\"}\n                  </Typography>\n                  <Typography variant=\"body2\">\n                    Your score: {quizScore.toFixed(1)}%\n                  </Typography>\n                </Alert>\n              )}\n              \n              {quizQuestions.map((question, index) => {\n                const questionId = question.id || index;\n                return (\n                  <Box key={questionId} sx={{ mb: 3, pb: 3, borderBottom: index < quizQuestions.length - 1 ? '1px solid #e0e0e0' : 'none' }}>\n                    <Typography variant=\"subtitle1\" gutterBottom>\n                      {index + 1}. {question.question}\n                    </Typography>\n                    \n                    <FormControl component=\"fieldset\" sx={{ ml: 2 }}>\n                      <RadioGroup\n                        value={quizAnswers[questionId] || ''}\n                        onChange={(e) => handleAnswerChange(questionId, Number(e.target.value))}\n                      >\n                        {question.options.map((option, optIndex) => {\n                          // Handle both array of strings and array of objects\n                          const optionId = typeof option === 'object' ? option.id : optIndex;\n                          const optionText = typeof option === 'object' ? option.text : option;\n                          \n                          return (\n                            <FormControlLabel\n                              key={optionId}\n                              value={optionId}\n                              control={<Radio />}\n                              label={optionText}\n                              disabled={quizSubmitted}\n                              sx={{\n                                ...(quizSubmitted && optionId === question.correctAnswer && {\n                                  color: 'success.main',\n                                  fontWeight: 'bold'\n                                }),\n                                ...(quizSubmitted && quizAnswers[questionId] === optionId && quizAnswers[questionId] !== question.correctAnswer && {\n                                  color: 'error.main'\n                                })\n                              }}\n                            />\n                          );\n                        })}\n                      </RadioGroup>\n                    </FormControl>\n                    \n                    {quizSubmitted && (\n                      <Box sx={{ mt: 1, ml: 2 }}>\n                        {quizAnswers[questionId] === question.correctAnswer ? (\n                          <Typography variant=\"body2\" sx={{ color: 'success.main', display: 'flex', alignItems: 'center' }}>\n                            <Check fontSize=\"small\" sx={{ mr: 0.5 }} />\n                            Correct!\n                          </Typography>\n                        ) : (\n                          <Typography variant=\"body2\" sx={{ color: 'error.main' }}>\n                            Incorrect. The correct answer is: {\n                              typeof question.options[question.correctAnswer] === 'object' \n                                ? question.options[question.correctAnswer]?.text \n                                : question.options[question.correctAnswer]\n                            }\n                          </Typography>\n                        )}\n                        \n                        <Typography variant=\"body2\" sx={{ mt: 1, fontStyle: 'italic' }}>\n                          {question.explanation}\n                        </Typography>\n                      </Box>\n                    )}\n                  </Box>\n                );\n              })}\n              \n              <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 3 }}>\n                {quizSubmitted ? (\n                  <Button \n                    variant=\"outlined\" \n                    onClick={resetQuiz} \n                    startIcon={<Assignment />}\n                  >\n                    Retake Quiz\n                  </Button>\n                ) : (\n                  <Button \n                    variant=\"contained\" \n                    onClick={handleQuizSubmit} \n                    startIcon={<Check />}\n                    disabled={Object.keys(quizAnswers).length !== quizQuestions.length}\n                  >\n                    Submit Answers\n                  </Button>\n                )}\n                \n                <Button \n                  variant=\"outlined\" \n                  onClick={handleNextChapter} \n                  endIcon={<ArrowForward />}\n                >\n                  Next Chapter\n                </Button>\n              </Box>\n            </Paper>\n          </>\n        )}\n      </Box>\n      \n      <Snackbar\n        open={snackbarOpen}\n        autoHideDuration={3000}\n        onClose={() => setSnackbarOpen(false)}\n        message={snackbarMessage}\n      />\n    </Box>\n  );\n};\n\nexport default ChapterContent; "],"names":["updateChapterProgress","moduleId","chapterId","isCompleted","chapterKey","localStorage","setItem","toString","updateModuleProgress","error","console","allChapterKeys","Object","keys","filter","key","startsWith","length","completedChapters","getItem","percentage","Math","round","getChapterProgress","markQuizCompleted","score","quizKey","verilogLang","require","hljs","registerLanguage","warn","ChapterView","_module$chapters","_context$currentModul3","_module$chapters2","_context$currentModul4","_chapterContent$secti","_chapterContent$codeE","_chapterContent$secti2","_chapterContent$codeE2","useParams","navigate","useNavigate","module","setModule","useState","chapter","setChapter","chapterContent","setChapterContent","loading","setLoading","drawerOpen","setDrawerOpen","isChapterBookmarked","setIsChapterBookmarked","isChapterCompleted","setIsChapterCompleted","snackbarOpen","setSnackbarOpen","snackbarMessage","setSnackbarMessage","snackbarSeverity","setSnackbarSeverity","setError","isAuthenticated","setIsAuthenticated","progress","setProgress","context","useContext","AuthContext","navigateToNextChapter","_context$currentModul","currentModule","chapters","nextIndex","currentChapterIndex","_context$setCurrentCh","setCurrentChapterIndex","call","useEffect","moduleType","user","async","_context$user$wholeDa","response","axios","post","URLSITE","email","wholeData","_response$data$paidMo","status","data","paidModule","some","mod","err","checkModuleAccess","setTimeout","document","querySelectorAll","forEach","block","highlightBlock","moduleData","getModuleById","Error","get","log","id","title","message","chapterIdNum","parseInt","fallbackChapter","find","c","description","sections","codeExamples","progressResponse","progressErr","isBookmarked","JSON","parse","bookmark","fetchModuleAndChapter","toggleDrawer","showSnackbar","severity","arguments","undefined","_jsx","Box","sx","display","justifyContent","alignItems","height","children","CircularProgress","_jsxs","className","textAlign","py","Typography","variant","Button","component","Link","to","mt","currentIndex","findIndex","ch","_Fragment","SEO","url","Drawer","anchor","open","onClose","width","p","mb","Divider","List","map","isCurrentChapter","ListItem","button","selected","borderRadius","bgcolor","color","CheckCircle","mr","fontSize","ListItemText","primary","primaryTypographyProps","fontWeight","IconButton","onClick","Menu","Breadcrumbs","style","textDecoration","startIcon","ArrowBack","MenuBook","Chip","size","icon","label","ml","gap","markChapterCompleted","Bookmark","BookmarkBorder","toggleChapterBookmark","bookmarkedChapters","bookmarkData","moduleTitle","chapterTitle","timestamp","Date","toISOString","updatedBookmarks","stringify","push","Paper","elevation","overflow","pb","gutterBottom","estimatedTime","isNewEditorUsed","dangerouslySetInnerHTML","__html","DOMPurify","sanitize","editorContent","FORBID_ATTR","section","content","example","language","code","explanation","ChapterContent","onQuizCompletion","passed","onNextChapter","NavigateBefore","navigateToPrevChapter","_context$currentModul2","prevIndex","_context$setCurrentCh2","endIcon","NavigateNext","Snackbar","autoHideDuration","Alert","_ref","_chapter$quiz","_chapter$quiz2","searchParams","useSearchParams","expandedSection","setExpandedSection","quizAnswers","setQuizAnswers","quizSubmitted","setQuizSubmitted","bookmarked","setBookmarked","sectionProgress","setSectionProgress","activeTab","setActiveTab","quizScore","setQuizScore","quizPassed","setQuizPassed","hasQuiz","Boolean","quiz","questions","quizQuestions","quizTitle","quizDescription","savedBookmarks","savedProgress","progressObj","completedSections","values","val","totalSections","Array","isArray","tabParam","hasNoSections","borderBottom","borderColor","px","Accordion","expanded","onChange","sectionId","updatedProgress","handleSectionChange","position","AccordionSummary","expandIcon","ExpandMore","e","stopPropagation","includes","toggleBookmark","AccordionDetails","Grid","container","spacing","bookmarkId","s","item","xs","sm","md","cursor","_document$getElementB","getElementById","scrollIntoView","behavior","examples","Code","paragraph","fontFamily","whiteSpace","overflowX","videos","video","Card","flexDirection","CardActionArea","href","target","rel","CardMedia","image","thumbnail","alt","top","left","background","transition","PlayArrow","Quiz","toFixed","question","index","_question$options$que","questionId","FormControl","RadioGroup","value","handleAnswerChange","prev","Number","options","option","optIndex","optionId","optionText","text","FormControlLabel","control","Radio","disabled","correctAnswer","Check","fontStyle","resetQuiz","Assignment","handleQuizSubmit","correctCount","totalQuestions","handleNextChapter","ArrowForward"],"sourceRoot":""}